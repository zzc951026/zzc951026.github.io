<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[转]人工智能教程]]></title>
    <url>%2F2019%2F05%2F26%2F%E8%BD%AC-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[人工智能教程 从机器学习谈起]]></content>
      <tags>
        <tag>Learning</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美图分享]]></title>
    <url>%2F2019%2F05%2F24%2F%E7%BE%8E%E5%9B%BE%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>Pic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[烟雨青黛]]></title>
    <url>%2F2019%2F05%2F04%2F%E7%83%9F%E9%9B%A8%E9%9D%92%E9%BB%9B%2F</url>
    <content type="text"><![CDATA[人生路远（陆远），唯有忘的干净（甘敬），才能拥有将来（江莱）。]]></content>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记（进阶）]]></title>
    <url>%2F2019%2F05%2F04%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89%2F</url>
    <content type="text"><![CDATA[第一章 函数式编程1、概念 函数：function（基础学过） 函数式：functional（一种编程范式） 函数式编程是一种抽象计算的编程模式。 2、特点 把计算视为函数而非指令 纯函数式编程：不需要变量，没有副作用，测试简单 支持高阶函数，代码简洁 3、Python支持的函数式编程 不是纯函数式编程：允许有变量 支持高阶函数：函数也可以作为变量传入 支持闭包：有了闭包就能返回函数 有限度地支持匿名函数 4、高阶函数 变量可以指向函数 函数名其实就是指向函数的变量 高阶函数：能接收函数做参数的函数。 1234567import mathdef add(x,y,f): return f(x) + f(y)print (add(-9,6,abs)) # ==&gt; 15print (add(25,9,math.sqrt)) # ==&gt; 8.0 5、map()函数map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。 *注：map()函数不改变原有的 list，而是返回一个新的 list。 1234567def format_name(s):# return s[0].upper() + s[1:].lower() return s.capitalize() # capitalize()将字符串的第一个字母变成大写,其他字母变小写 print (list(map(format_name, [&apos;adam&apos;, &apos;LISA&apos;, &apos;barT&apos;]))) # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]# Python2中返回list的高阶函数，而在Python3中返回的不是list，若需要打印list，则用list() 6、reduce()函数reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。reduce()还可以接收第3个可选参数，作为计算的初始值。那么第一轮计算就是初始值与list里面第一个元素做传入函数操作。12345678# 求积函数from functools import reduce # python 3.0以后, reduce已经不在built-in function里了, 要用它就得from functools import reducedef prod(x, y): return x * yprint (reduce(prod, [2, 4, 5, 7, 12])) # ==&gt; 3360 7、filter()函数filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。 *注：s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下： 12a = &apos; \t123\r\n&apos;a.strip() # &apos;123&apos; 1234567891011# 过滤出1~100中平方根是整数的数import mathdef is_sqr(x):# return int(math.sqrt(x)) == math.sqrt(x) return math.sqrt(x) % 1 == 0# 以上两种实现方法print (list(filter(is_sqr, range(1, 101)))) # ==&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]# Python2中返回list的高阶函数，而在Python3中返回的不是list，若需要打印list，则用list() 8、自定义排序函数 *注：Python2的sorted()函数：sorted(iterable，cmp，key，reverse）Python3中的sorted()函数：少了cmp参数。参数： iterable可以是list或者iterator； cmp是带两个参数的比较函数； key 是带一个参数的函数； reverse为False或者True； Python内置的 sorted()函数可对list进行排序：12sorted([36, 5, 12, 9, 21])# [5, 9, 12, 21, 36] 12sorted([36, 5, 12, 9, 21],reverse = True)# [36, 21, 12, 9, 5] sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序。比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。123456789101112def cmp_ignore_case(s1, s2): a = s1.lower() b = s2.lower() if a &gt; b: return 1 elif a &lt; b: return -1 else: return 0print sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], cmp_ignore_case)# ==&gt; [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;] 9、返回函数Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！123456789def f(): print (&apos;call f()...&apos;) # 定义函数g: def g(): print (&apos;call g()...&apos;) # 返回函数g: return gx = f() # ==&gt; call f()...x() # ==&gt; call g()... 1234567def calc_prod(lst): def prod(): return reduce(lambda x,y : x * y,lst) return prodf = calc_prod([1, 2, 3, 4])print (f()) # ==&gt; 24 *注：关于Python中的lambda见下11。 10、闭包内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。123456def calc_sum(lst): def lazy_sum(): return sum(lst) return lazy_sum# 没法把 lazy_sum 移到 calc_sum 的外部# 因为它引用了 calc_sum 的参数 lst 闭包的特点：返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。1234567891011# 希望一次返回3个函数，分别计算1x1,2x2,3x3:def count(): fs = [] for i in range(1, 4): def f(): return i*i fs.append(f) return fsf1, f2, f3 = count()print f1(), f2(), f3() # ==&gt; 9 9 9 认为调用f1()，f2()和f3()结果应该是1 4 9，但实际结果全部都是 9。原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。1234567891011# 改正上述程序def count(): fs = [] for i in range(1, 4): def f(i): return lambda : i*i fs.append(f(i)) return fsf1, f2, f3 = count()print f1(), f2(), f3() # ==&gt; 1 4 9 11、匿名函数高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。以map()函数为例：12map(lambda x: x * x, [1, 2, 3, 4, 5, 6])# [1, 4, 9, 16, 25, 36] 关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。 匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。 使用匿名函数，可以不必定义函数名，直接创建一个函数对象。 返回函数时，也可以返回匿名函数：123myabs = lambda x: -x if x &lt; 0 else xprint(myabs(-1)) # ==&gt; 1print(myabs(1)) # ==&gt; 1 12345def is_not_empty(s): return s and len(s.strip()) &gt; 0print (list(filter(is_not_empty, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos; &apos;, &apos;END&apos;])))# ==&gt; [&apos;test&apos;, &apos;str&apos;, &apos;END&apos;] 简化为：print (list(filter(lambda s: s and len(s.strip()) &gt; 0, [&#39;test&#39;, None, &#39;&#39;, &#39;str&#39;, &#39; &#39;, &#39;END&#39;]))) *注：详细讲解关于Python中的lambda 12、decorator装饰器1234567891011def newfn(f): def fn(x): print (&apos;call&apos;+f.__name__+&apos;...&apos;) return f(x) return fndef f1(x): return x*2f1 = newfn(f1)print (f1(5))# ==&gt; callf1...# ==&gt; 10 Python内置的@语法就是为了简化装饰器调用123@newfndef f1(x): return x*2 = = &gt; &gt; &gt;123def f1(x): return x*2f1 = newfn(f1) *装饰器的作用：可以极大地简化代码，避免每个函数编写重复性代码。 打印日志：@log 检测性能：@performance 数据库事务：@transaction URL路由：@post(‘/register’) *无参数decorator：Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。使用 decorator 用Python提供的 @ 语法，这样可以避免手动编写 f = decorate(f) 这样的代码。以@log为例：12345def log(f): def fn(x): print &apos;call &apos; + f.__name__ + &apos;()...&apos; return f(x) return fn 对于只有一个参数的阶乘函数，1234567@logdef factorial(n): return reduce(lambda x,y: x*y, range(1, n+1))print (factorial(10))# ==&gt; call factorial()...# ==&gt; 3628800 但是，对于参数不止一个的函数，就会报错。由于@log写死了返回函数只含一个参数。 要让 @log 自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用：1234567def log(f): def fn(*args, **kw): print &apos;call &apos; + f.__name__ + &apos;()...&apos; return f(*args, **kw) return fn# 现在，对于任意函数，@log 都能正常工作了。 123456789101112131415import timefrom functools import reducedef performance(f): def fn(*args, **kw): print (&apos;call &apos; + f.__name__ + &apos;() in &apos; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)) print(&apos;call &apos; + f.__name__ + &apos;() in &apos; + time.strftime(&apos;%Y&#123;y&#125;%m&#123;m&#125;%d&#123;d&#125; %H:%M:%S&apos;).format(y=&apos;年&apos;,m=&apos;月&apos;,d=&apos;日&apos;)) return f(*args, **kw) return fn@performancedef factorial(n): return reduce(lambda x,y: x * y, range(1, n+1))print (factorial(10)) *注：Python3 日期和时间 time与calendar *带参数decorator：从上一小节的@log装饰器可以看出，打印的语句不能改变（除了函数名）。若需要打印内容改变，log函数本身需要传入参数，类似这样：123@log(&apos;DEBUG&apos;)def my_func(): pass 翻译成高阶函数的调用：my_func = log(&#39;DEBUG&#39;)(my_func)展开一下：12log_decorator = log(&apos;DEBUG&apos;)my_func = log_decorator(my_func) 由此可见，带参数的log函数首先返回一个decorator函数，再让这个decorator函数接收my_func并返回新函数。1234567891011121314151617def log(s): def log_decorator(f): def fn(*args, **kw):# print (&apos;[&apos; + s + &apos;]&apos; + &apos;call &apos; + f.__name__ + &apos;()...&apos;) print (&apos;[%s]call %s()...&apos;%(s, f.__name__)) return f(*args, **kw) return fn return log_decorator@log(&apos;DEBUG&apos;)def test(): passprint (test())# ==&gt; [DEBUG]call test()...# ==&gt; None *完善decorator：@decorator可以动态实现函数功能的增加，与原函数相比，还有一些其他改变的地方。以打印函数名为例：123456789def log(f): def wrapper(*args, **kw): print (&apos;call...&apos;) return f(*args, **kw) return wrapper@logdef f2(x): passprint (f2.__name__) # ==&gt; wrapper 可见，由于decorator返回的新函数函数名已经不是’f2’，而是@log内部定义的’wrapper’。这对于那些依赖函数名的代码就会失效。decorator还改变了函数的doc等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要把原函数的一些属性复制到新函数中。如果一一赋值就会很繁琐，我们可以使用Python内置的functools可以用来自动化完成这个“复制”的任务：1234567import functoolsdef log(f): @functools.wraps(f) def wrapper(*args, **kw): print &apos;call...&apos; return f(*args, **kw) return wrapper 13、偏函数假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：1234def int2(x, base=2): return int(x, base)print (int2(&apos;1010101&apos;)) # ==&gt; 85 functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：123import functoolsint2 = functools.partial(int, base=2)print (int2(&apos;1010101&apos;)) # ==&gt; 85 所以，functools.partial可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。 第二章 模块1、概念代码越来越多时， 将所有代码放入一个py文件：无法维护。 将代码拆分放入多个py文件：同一名字、不同py文件中的变量互不影响。 模块的名字就是py文件的文件名。*引用其他模块：123# test.py # &lt;-- 自身模块名testimport math # &lt;-- 引用math模块print (math.sqrt(9)) # &lt;-- 调用math模块的函数 模块多了就容易重名，导致模块名冲突。 要解决模块名冲突，就将同名模块放入不同包中，因为位于不同包中的同名模块，它们的完整模块名不同（加入了”包名.”前缀）。 在调用同名模块时，也需要写齐完整的模块名。 在文件系统中， 包就是文件夹，可以有多级 模块就是xxx.py文件区分包与普通目录：包的每层都必须要有init.py这个文件! 2、导入模块要使用一个模块，必须首先导入它。Python使用import语句导入一个模块。我们就可以认为math就是一个指向已导入模块的变量，通过该变量，我们可以访问math模块中所定义的所有公开的函数、变量、类。123import mathprint (math.pi) 还可以使用from … import语句，导入模块中的某几个函数。这样就可以直接引用函数，而不需通过模块名来调用。123from math import pi, sin, sqrt, log, eprint (sin(pi/6), sqrt(9), log(e), e) 若遇到名字冲突，（如math和logging模块中都有log函数）（1）使用import导入:由于必须通过模块名来调用函数，因此不存在冲突；（2）使用from … import导入:必然引起冲突。这时可以通过 as 给函数起个“别名”来避免冲突。123456from math import logfrom logging import log as logger# 现在，logging的log就有了个logger别名print (log(10))logger(10, &apos;import from logging&apos;) 3、动态导入模块当导入模块不存在时，Python解释器会报ImportError错误。有的时候，两个不同的模块提供了相同的功能，比如 StringIO 和 cStringIO 都提供了StringIO这个功能。 这是因为Python是动态语言，解释执行，因此Python代码运行速度慢。如果要提高Python代码的运行速度，最简单的方法是把某些关键函数用 C 语言重写，这样就能大大提高执行速度。 同样的功能，StringIO 是纯Python代码编写的，而 cStringIO 部分函数是 C 写的，因此 cStringIO 运行速度更快。 利用ImportError错误，我们经常在Python中动态导入模块：1234567891011# 对于Python2，try: from StringIO import StringIOexcept ImportError: from StringIO import StringIO# 先尝试从cStringIO导入，如果失败了，再尝试从StringIO导入。# 这样，要么提高运行速度，要么运行速度变慢，但不会影响代码正常执行。# 对于Python3，from io import StringIO try 的作用是捕获错误，并在捕获到指定错误时执行 except 语句。 4、使用__future__要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。 5、Python3安装第三方模块的三种方法 第三章 面向对象编程1、概念 面向对象编程是一种程序设计范式 把程序看做不同对象的相互调用 对现实世界建立对象模型 2、基本思想类和实例： 类用于定义抽象类型 12class Person: pass 实例根据类的定义被创建出来xiaoMing = Person() 面向对象编程：数据封装12345class Person: def __init__(self, name): self.name = namep = Person(&apos;aaa&apos;)print (p.name) # ==&gt; aaa 3、定义类并创建实例在Python中，类通过 class 关键字定义。12class Person(object): pass 按照 Python 的编程习惯，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的。有了Person类的定义，就可以创建出具体的实例。创建实例使用 类名+()，类似函数调用的形式创建：xiaoMing = Person() 4、创建实例属性通过Person类创建出多个实例，但是这些实例看上去除了地址不同外，没有什么其他不同。在现实世界中，区分多个实例要依靠他们各自的属性。如何让每个实例拥有各自不同的属性？由于Python是动态语言，对每一个实例，都可以直接给他们的属性赋值：1234xiaoming = Person()xiaoming.name = &apos;Xiao Ming&apos;xiaoming.gender = &apos;Male&apos;xiaoming.birth = &apos;1990-1-1&apos; 给xiaohong加上的属性不一定要和xiaoming相同：1234xiaohong = Person()xiaohong.name = &apos;Xiao Hong&apos;xiaohong.school = &apos;No. 1 High School&apos;xiaohong.grade = 2 而且，实例的属性可以像普通变量一样进行操作：xiaohong.grade = xiaohong.grade + 1 5、初始化实例属性虽然我们可以自由地给一个实例绑定各种属性，但是，现实世界中，我们创建出一个实例时，它就应该拥有一些属性。因此，我们在定义类时，可以为该类添加一个特殊的__init__()方法，当用该类创建实例时，__init__()方法会被自动调用。这样，实例创建出来就会具有属性：12345class Person(object): def __init__(self, name, gender, birth): self.name = name self.gender = gender self.birth = birth __init__() 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法）。后续参数则可以自由指定，和定义函数没有任何区别。相应地，创建实例时，就必须要提供除 self 以外的参数：xiaoming = Person(&#39;Xiao Ming&#39;, &#39;Male&#39;, &#39;1991-1-1&#39;)在访问属性时，可以使用 . 操作符：123456789101112class Person(object): def __init__(self, name, gender, birth, **kw): self.name = name self.gender = gender self.birth = birth self.__dict__.update(kw) # 更新语句xiaoming = Person(&apos;Xiao Ming&apos;, &apos;Male&apos;, &apos;1990-1-1&apos;, job=&apos;Student&apos;, wx = 2010, qq=2222)print (xiaoming.wx)print (xiaoming.qq) 6、访问限制Python对属性权限的控制是通过属性名来实现的。 如果一个属性由双下划线开头__，该属性就无法被外部访问。 1234567891011121314151617181920class Person(object): def __init__(self, name): self.name = name self._title = &apos;Mr&apos; self.__job = &apos;Student&apos;p = Person(&apos;Bob&apos;)print p.name# =&gt; Bobprint p._title# =&gt; Mrprint p.__job# =&gt; ErrorTraceback (most recent call last): File &quot;B:\Users\Steven\LearnPython\new.py&quot;, line 24, in &lt;module&gt; print (p.__job)AttributeError: &apos;Person&apos; object has no attribute &apos;__job&apos; 可见，只有以双下划线开头的”__job”不能直接被外部访问。 如果一个属性以”__xxx__”的形式定义，那它又可以被外部访问了。以”__xxx__”定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常我们不要把普通属性用”__xxx__”定义。 以单下划线开头的属性”_xxx”虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。 123456789101112class Person(object): def __init__(self, name, score): self.name = name self.__score = scorep = Person(&apos;Bob&apos;, 59)print (p.name)try: print (p.__score)except AttributeError: print (&apos;AttributeError&apos;) 详解可见，python3 面向对象：访问限制 7、创建类属性类是模板，而实例则是根据类创建的对象。绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。1234class Person(object): address = &apos;Earth&apos; def __init__(self, name): self.name = name 因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问：12print (Person.address)# =&gt; Earth 对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性：123456p1 = Person(&apos;Bob&apos;)p2 = Person(&apos;Alice&apos;)print (p1.address)# =&gt; Earthprint (p2.address)# =&gt; Earth 由于Python是动态语言，类属性也是可以动态添加和修改的：12345Person.address = &apos;China&apos;print (p1.address)# =&gt; &apos;China&apos;print (p2.address)# =&gt; &apos;China&apos; 因为类属性只有一份，所以，当Person类的address改变时，所有实例访问到的类属性都改变了。 8、类属性和实例属性名字冲突怎么办修改类属性会导致所有实例访问到的类属性全部都受影响。但是，如果在实例变量上修改类属性：1234567891011121314151617181920class Person(object): address = &apos;Earth&apos; def __init__(self, name): self.name = namep1 = Person(&apos;Bob&apos;)p2 = Person(&apos;Alice&apos;)print (&apos;Person.address = &apos; + Person.address)# ==&gt; Person.address = Earthp1.address = &apos;China&apos;print (&apos;p1.address = &apos; + p1.address)# ==&gt; p1.address = Chinaprint (&apos;Person.address = &apos; + Person.address)# ==&gt; Person.address = Earthprint (&apos;p2.address = &apos; + p2.address)# ==&gt; p2.address = Earth 由此可见，在设置了 p1.address = ‘China’ 后，p1访问 address 确实变成了 ‘China’，但是，Person.address和p2.address仍然是’Earth’。原因是 p1.address = ‘China’并没有改变 Person 的 address，而是给 p1这个实例绑定了实例属性address 。对p1来说，它有一个实例属性address（值是’China’），而它所属的类Person也有一个类属性address，所以： 访问 p1.address 时，优先查找实例属性，返回’China’。 访问 p2.address 时，p2没有实例属性address，但是有类属性address，因此返回’Earth’。 可见，当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。123456789101112131415161718class Person(object): __count = 0 def __init__(self, name): self.name = name Person.__count += 1 print (Person.__count)p1 = Person(&apos;Bob&apos;)# ==&gt; 1p2 = Person(&apos;Alice&apos;)# ==&gt; 2try: print (Person.__count)except AttributeError: print (&apos;AttributeError&apos;)# ==&gt; AttributeError 9、定义实例方法一个实例的私有属性就是以__开头的属性，无法被外部访问，那这些属性定义有什么用？虽然私有属性无法从外部访问，但是，从类的内部是可以访问的。除了可以定义实例的属性外，还可以定义实例的方法。实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：1234567class Person(object): def __init__(self, name): self.__name = name def get_name(self): return self.__name get_name(self) 就是一个实例方法，它的第一个参数是self。__init__(self, name)其实也可看做是一个特殊的实例方法。调用实例方法必须在实例上调用：123p1 = Person(&apos;Bob&apos;)print (p1.get_name()) # self不需要显式传入# =&gt; Bob 在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得。这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。123456789101112131415161718192021class Person(object): def __init__(self, name, score): self.name = name self.__score = score def get_grade(self): if self.__score &gt;= 90: return &apos;A&apos; elif self.__score &gt;= 60: return &apos;B&apos; else: return &apos;C&apos;p1 = Person(&apos;Bob&apos;, 90)p2 = Person(&apos;Alice&apos;, 65)p3 = Person(&apos;Tim&apos;, 48)print (p1.get_grade()) # ==&gt; Aprint (p2.get_grade()) # ==&gt; Bprint (p3.get_grade()) # ==&gt; C 10、方法也是属性因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法（不常见）。 11、定义类方法和属性类似，方法也分实例方法和类方法。在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。要在class中定义类方法，需要这么写：123456789101112class Person(object): count = 0 @classmethod def how_many(cls): return cls.count def __init__(self, name): self.name = name Person.count = Person.count + 1print (Person.how_many())p1 = Person(&apos;Bob&apos;)print (Person.how_many()) 通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls，上面的 cls.count 实际上相当于 Person.count。因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。12345678910111213class Person(object): __count = 0 @classmethod def how_many(cls): return cls.__count def __init__(self, name): self.name = name Person.__count += 1 print (Person.how_many())p1 = Person(&apos;Bob&apos;)print (Person.how_many()) 第四章 类的继承1、继承一个类如果已经定义了Person类，需要定义新的Teacher类时，可以直接从Person类继承；总是从某个类继承，若没有合适的类，就从object类继承。定义Teacher类时，只需要把额外的属性加上，例如course；并且，一定要用 super(Teacher, self).__init__(name, gender) 去初始化父类，否则，继承自 Person 的 Teacher 将没有 name 和 gender。 函数super(Teacher, self)将返回当前类继承的父类，即 Person ，然后调用__init__()方法，注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。12345678910111213class Person(object): def __init__(self, name, gender): self.name = name self.gender = genderclass Teacher(Person): def __init__(self, name, gender, course): super(Teacher, self).__init__(name, gender) self.course = courset = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)print (t.name)print (t.course) 2、判断类型函数isinstance()可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。123456789101112131415161718192021class Person(object): def __init__(self, name, gender): self.name = name self.gender = genderclass Student(Person): def __init__(self, name, gender, score): super(Student, self).__init__(name, gender) self.score = scoreclass Teacher(Person): def __init__(self, name, gender, course): super(Teacher, self).__init__(name, gender) self.course = courset = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)print (isinstance(t, Person)) # ==&gt; Trueprint (isinstance(t, Student)) # ==&gt; Falseprint (isinstance(t, Teacher)) # ==&gt; Trueprint (isinstance(t, object)) # ==&gt; True 由此说明，在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。但是，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。 3、多态类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Person 派生出 Student和Teacher ，并都写了一个 whoAmI() 方法：12345678910111213141516171819202122232425262728293031class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def whoAmI(self): return &apos;I am a Person, my name is %s&apos; % self.nameclass Student(Person): def __init__(self, name, gender, score): super(Student, self).__init__(name, gender) self.score = score def whoAmI(self): return &apos;I am a Student, my name is %s&apos; % self.nameclass Teacher(Person): def __init__(self, name, gender, course): super(Teacher, self).__init__(name, gender) self.course = course def whoAmI(self): return &apos;I am a Teacher, my name is %s&apos; % self.namedef who_am_i(x): print (x.whoAmI())p = Person(&apos;Tim&apos;, &apos;Male&apos;)s = Student(&apos;Bob&apos;, &apos;Male&apos;, 88)t = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)who_am_i(p) # ==&gt; I am a Person, my name is Timwho_am_i(s) # ==&gt; I am a Student, my name is Bobwho_am_i(t) # ==&gt; I am a Teacher, my name is Alice 这种行为称为多态。也就是说，方法调用将作用在 x 的实际类型上。s 是Student类型，它实际上拥有自己的 whoAmI()方法以及从 Person继承的 whoAmI方法，但调用 s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。 由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：123class Book(object): def whoAmI(self): return &apos;I am a book&apos; 这就是动态语言和静态语言（例如Java）最大的差别之一。 动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。 4、多重继承Python允许从多个父类继承，称为多重继承。 多重继承的目的是从两种继承树中分别选择并继承出子类，以便组合功能使用。 5、获取对象信息拿到一个变量，除了用 isinstance() 判断它是否是某种类型的实例外，还有一些别的方法获取到更多的信息。 首先可以用 type() 函数获取变量的类型，它返回一个 Type 对象： 123print (type(123)) # ==&gt; &lt;class &apos;int&apos;&gt;s = Student(&apos;Bob&apos;, &apos;Male&apos;, 88) # Student类之前已定义，此处省略了。print (type(s)) # ==&gt; &lt;class &apos;__main__.Student&apos;&gt; 其次，可以用 dir() 函数获取变量的所有属性： 12print (type(123))print (type(s)) 对于实例变量，dir()返回所有实例属性，包括__class__这类有特殊意义的属性。注意到方法whoAmI也是 s 的一个属性。dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 getattr() 和 setattr( )函数了：1234567print (getattr(s, &apos;name&apos;)) # ==&gt; Bobsetattr(s, &apos;name&apos;, &apos;Adam&apos;)print (getattr(s, &apos;name&apos;)) # ==&gt; Adamprint (getattr(s, &apos;age&apos;, 20)) # ==&gt; 20# 获取age属性，如果属性不存在，就返回默认值20 123456789class Person(object): def __init__(self, name, gender, **kw): self.__dict__.update(kw) self.name = name self.gender = genderp = Person(&apos;Bob&apos;, &apos;Male&apos;, age=18, course=&apos;Python&apos;)print (p.age) # ==&gt; 18print (p.course) # ==&gt; Python 第五章 定制类1、特殊方法先举个例子，比较print的结果：12345print (lst)# ==&gt; [1, 2, 3]print (s)# ==&gt; &lt;__main__.Student object at 0x000001DD12010128&gt; Python是如何把任一变量变成str？任何数据类型的实例都有一个特殊方法__str__(),打印就是调用了这个方法。我们可以在一个类里面加入该特殊方法，按自己的想法进行打印。123456789class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def __str__(self): return &apos;(Person:%s,%s)&apos;%(self.name,self.gender)p = Person(&apos;Bob&apos;, &apos;Male&apos;)print (p) # ==&gt; (Person:Bob,Male) 定义： 定义在class当中 不需要直接调用 Python的某些函数或者是操作符会调用相应的特殊方法 有哪些特殊方法？ 用于print的__str__ 用于len的__len__ 用于cmp（比较）的__cmp__… 如何正确实现特殊方法？ 只需要编写用到的特殊方法 有关联性的特殊方法都必须实现比如：__getattr__ __setattr__ __delattr__ 具体可见，python之特殊方法 2、__str__和__repr__如果要把一个类的实例变成 str，就需要实现特殊方法__str__()。Python 定义了__str__()和__repr__()两种方法。 __str__()用于显示给用户； __repr__()用于显示给开发人员。 123456789101112class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def __str__(self): return &apos;(Person:%s,%s)&apos;%(self.name,self.gender)p = Person(&apos;Bob&apos;, &apos;Male&apos;)print (p) # ==&gt; (Person:Bob,Male)print (p.__str__()) # ==&gt; (Person:Bob,Male)print (p.__repr__()) # ==&gt; &lt;__main__.Person object at 0x000001D434E1B278&gt; 有种偷懒定义__repr__的方法：__repr__ = __str__ 3、__cmp__（Python2, 3 有区别）*Python2:对 int、str 等内置数据类型排序时，Python的 sorted() 按照默认的比较函数 cmp 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()。__cmp__用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。而在Python3中有所不同。 *Python3：在Python3中已没有cmp()函数，如果你需要实现比较功能，需要引入 operator 模块，适合任何对象，包含的方法有： lt(a, b) 相当于 a &lt; b –&gt; 从第一个数字或字母（ASCII）比大小 le(a, b) 相当于 a &lt;= b eq(a, b) 相当于 a == b –&gt; 字母完全一样，返回True ne(a, b) 相当于 a != b gt(a, b) 相当于 a &gt; b ge(a, b) 相当于 a &gt;= b123456import operatordict1 = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;dict2 = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;dict3 = &#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;print(operator.eq(dict1, dict2)) # ==&gt; Trueprint(operator.eq(dict1, dict3)) # ==&gt; False 函数的返回值是布尔。（以上Python3部分转自：随记Python3中比较函数operator） 特殊函数与以上相类似：12345678910111213141516171819class Student(object): def __init__(self, name, score): self.name = name self.score = score def __str__(self): return &apos;(Student: %s, %s)&apos;%(self.name, self.score) __repr__ = __str__ def __lt__(self,s): return self.name &lt; s.name def __gt__(self,s): return self.name &gt; s.name def __eq__(self,s): return self.name == s.nameL = [Student(&apos;Tim&apos;, 99), Student(&apos;Bob&apos;, 88), Student(&apos;Alice&apos;, 77)]print (sorted(L))# ==&gt; [(Student: Alice, 77), (Student: Bob, 88), (Student: Tim, 99)] 1234567891011121314151617181920212223242526272829303132# 按照分数从高到底排序，分数相同的按名字排序。class Student(object): def __init__(self, name, score): self.name = name self.score = score def __str__(self): return &apos;(%s: %s)&apos; % (self.name, self.score) __repr__ = __str__ # Python2 # def __cmp__(self, s): # if self.score &gt; s.score: # return -1 # elif self.score &lt; s.score: # return 1 # else: # if self.name &gt; s.name: # return 1 # elif self.name &lt; s.name: # return -1 # else: # return 0 # Python3 def __lt__(self, s): if self.score == s.score: return self.name &lt; s.name return self.score &gt; s.score L = [Student(&apos;Tim&apos;, 99), Student(&apos;Bob&apos;, 88), Student(&apos;Alice&apos;, 99)]print (sorted(L)) # ==&gt; [(Alice: 99), (Tim: 99), (Bob: 88)] *注：自己总结出来的规律，以属性 xxx 排序为例： 升序排列, 符号相同：__lt__(self, s) 【 &lt; 】 函数内就应该 return self.xxx &lt; s.xxx__gt__(self, s) 【 &gt; 】 函数内就应该 return self.xxx &gt; s.xxx 降序排列, 符号相反：__lt__(self, s) 【 &lt; 】 函数内就应该 return self.xxx &gt; s.xxx__gt__(self, s) 【 &gt; 】 函数内就应该 return self.xxx &lt; s.xxx 4、__len__如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。要让 len() 函数工作正常，类必须提供一个特殊方法__len__()，它返回元素的个数。12345678class Students(object): def __init__(self, *args): self.names = args def __len__(self): return len(self.names)ss = Students(&apos;Bob&apos;, &apos;Alice&apos;, &apos;Tim&apos;)print (len(ss)) # ==&gt; 3 1234567891011121314151617181920# 斐波那契数列class Fib(object): def __init__(self, num): self.lst = [0, 1] count = 2 while(count &lt; num): numb = self.lst[count-1] + self.lst[count-2] self.lst.append(numb) count = count + 1 def __str__(self): return str(self.lst) def __len__(self): return len(self.lst)f = Fib(10)print (f) # ==&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]print (len(f)) # ==&gt; 10 5、数学运算Python 提供的基本数据类型 int、float 可以做整数和浮点的四则运算以及乘方等运算。但是，四则运算不局限于int和float，还可以是有理数、矩阵等。要表示有理数，可以用一个Rational类来表示：1234class Rational(object): def __init__(self, p, q): self.p = p self.q = q p、q 都是整数，表示有理数 p/q。如果要让Rational进行+运算，需要正确实现__add__：12345678910111213class Rational(object): def __init__(self, p, q): self.p = p self.q = q def __add__(self, r): return Rational(self.p * r.q + self.q * r.p, self.q * r.q) def __str__(self): return &apos;%s/%s&apos; % (self.p, self.q) __repr__ = __str__r1 = Rational(1, 3)r2 = Rational(1, 2)print (r1 + r2) # ==&gt; 5/6 1234567891011121314151617181920212223242526272829303132333435363738394041# 完善Rational类，实现四则运算。class Rational(object): def __init__(self, p, q): self.p = p self.q = q def __add__(self, r): return Rational(self.p * r.q + self.q * r.p, self.q * r.q) def __sub__(self, r): return Rational(self.p * r.q - self.q * r.p, self.q * r.q) def __mul__(self, r): return Rational(self.p * r.p, self.q * r.q) # Python3中除法的方法是__truediv__()不是__div__() def __truediv__(self, r): return Rational(self.p * r.q, self.q * r.p) def __str__(self):# 约分 if self.p &lt; self.q: k = self.p k = self.q for x in range(k, 0, -1): if self.p % x == 0 and self.q % x == 0: self.p = self.p / x self.q = self.q / x if self.q == 1: return &apos;%d&apos;%self.p return &apos;%d/%d&apos;%(self.p, self.q) __repr__ = __str__ r1 = Rational(1, 2)r2 = Rational(1, 4)print (r1 + r2) # ==&gt; 3/4print (r1 - r2) # ==&gt; 1/4print (r1 * r2) # ==&gt; 1/8print (r1 / r2) # ==&gt; 2 6、类型转换Rational类实现了有理数运算，但是，如果要把结果转为 int 或 float 怎么办？考察整数和浮点数的转换：12print (int(12.34)) # ==&gt; 12print (float(12)) # ==&gt; 12.0 如果要把 Rational 转为 int，应该使用：12r = Rational(12, 5)n = int(r) 要让int()函数正常工作，只需要实现特殊方法__int__();同理，要让float()函数正常工作，只需要实现特殊方法__float__()。12345678910111213class Rational(object): def __init__(self, p, q): self.p = p self.q = q def __int__(self): return self.p // self.q def __float__(self): return self.p / self.qprint (int(Rational(7, 2))) # ==&gt; 3print (float(Rational(1, 3))) # ==&gt; 0.3333333333333333 7、@property考察 Student 类：1234class Student(object): def __init__(self, name, score): self.name = name self.score = score 要是想修改score属性，可以这样写：12s = Student(&apos;Bob&apos;, 60)s.score = 1000 显然，这样无法检查赋值的有效性。我们就可以这样改进：1234567891011121314151617class Student(object): def __init__(self, name, score): self.name = name self.__score = score def get_score(self): return self.__score def set_score(self, score): if (score &lt; 0 or score &gt;100): raise ValueError(&apos;invalid score&apos;) self.__score = score s = Student(&apos;Bob&apos;, 60)try: s.set_score(1000)except ValueError as v: print (v) # ==&gt; invalid score *注：Python3异常处理, raise异常，自定义异常类 这种使用 get/set 方法来封装对一个属性的访问在许多面向对象编程的语言中都很常见。但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。有种两全其美的方法：因为Python支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 get/set 方法“装饰”成属性调用。123456789101112class Student(object): def __init__(self, name, score): self.name = name self.__score = score @property def score(self): return self.__score @score.setter def score(self, score): if score &lt; 0 or score &gt; 100: raise ValueError(&apos;invalid score&apos;) self.__score = score *注： 第一个score(self)是get方法，用@property装饰； 第二个score(self, score)是set方法，用@score.setter装饰，@score.setter是前一个@property装饰后的副产品。 现在，就可以像使用属性一样设置score了：12345678s = Student(&apos;Bob&apos;, 59)s.score = 60print (s.score) # ==&gt; 60try: s.set_score(1000)except ValueError as v: print (v) # ==&gt; invalid score 说明对 score 赋值实际调用的是 set方法。12345678910111213141516171819202122232425262728293031class Student(object): def __init__(self, name, score): self.name = name self.__score = score @property def score(self): return self.__score @score.setter def score(self, score): if score &lt; 0 or score &gt; 100: raise ValueError(&apos;invalid score&apos;) self.__score = score @property def grade(self): if self.__score &gt;= 80: return &apos;A&apos; elif self.__score &gt;= 60: return &apos;B&apos; else: return &apos;C&apos;s = Student(&apos;Bob&apos;, 59)print (s.grade) # ==&gt; Cs.score = 60print (s.grade) # ==&gt; Bs.score = 99print (s.grade) # ==&gt; A 8、__slots__由于Python是动态语言，任何实例在运行期都可以动态地添加属性。如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的__slots__来实现。顾名思义，__slots__是指一个类允许的属性列表：123456class Student(object): __slots__ = (&apos;name&apos;, &apos;gender&apos;, &apos;score&apos;) def __init__(self, name, gender, score): self.name = name self.gender = gender self.score = score 若添加不允许的属性，就会报错：1234567s = Student(&apos;Bob&apos;, &apos;male&apos;, 59)s.grade = &apos;A&apos;# ==&gt; Traceback (most recent call last): ...AttributeError: &apos;Student&apos; object has no attribute &apos;grade&apos; __slots__的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用__slots__也能节省内存。123456789101112131415161718class Person(object): __slots__ = (&apos;name&apos;, &apos;gender&apos;) def __init__(self, name, gender): self.name = name self.gender = genderclass Student(Person): __slots__ = (&apos;score&apos;) # 继承类中只需要写出增加的允许属性。 def __init__(self, name, gender, score): super(Student, self).__init__(name, gender) self.score = score s = Student(&apos;Bob&apos;, &apos;male&apos;, 59)s.name = &apos;Tim&apos;s.score = 99print (s.score) # ==&gt; 99 9、__call__在Python中，函数其实是一个对象：12f = absprint (f.__name__) # ==&gt; abs 由于 f 可以被调用，所以，f 被称为可调用对象。 所有的函数都是可调用对象。 一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。1234567891011121314class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender def __call__(self, friend): print (&apos;My name is %s...&apos; % self.name) print (&apos;My friend is %s...&apos; % friend) p = Person(&apos;Bob&apos;, &apos;male&apos;)p(&apos;Tim&apos;)# ==&gt; My name is Bob...# ==&gt; My friend is Tim... 单看 p(‘Tim’) ,无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是对象，对象和函数的区别并不显著。12345678910111213# 斐波那契数列class Fib(object): def __call__(self, x): l = [0, 1] count = 2 while(count &lt; x): numb = l[count-1] + l[count-2] l.append(numb) count = count + 1 return lf = Fib()print (f(10))]]></content>
      <tags>
        <tag>Learning</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记（基础）]]></title>
    <url>%2F2019%2F04%2F23%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[第一章 基本功1、变量名命名规则在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头 2、print语句print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。print会依次打印每个字符串，遇到逗号“,”会输出一个空格。print &#39;100 + 200 =&#39;, 100 + 200 # ==&gt; 100 + 200 = 300 3、raw字符串如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，我们可以在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：r&#39;\ (~_~)/ \ (~_~)/&#39; 4、多行字符串如果要表示多行字符串，可以用’’’…’’’表示：123&apos;&apos;&apos;Line 1Line 2Line 3&apos;&apos;&apos; 与&#39;Line 1\nLine 2\nLine 3&#39;显示结果完全一样 5、Unicode字符串如果要正常输出中文，需要在字符串前面加一个前缀 u ，例如：print u‘中文’并且需要在第一行添加注释:# -*- coding: utf-8 -*- *注： （1）Python对缩进要求严格，输入代码前面不能空格； （2）Python是一种动态语言，赋值无需定义变量类型； （3）以上三种字符串可以混合使用； （4）用‘#’符号注释语句； 在Python3中，字符串统一为unicode，不需要加前缀 u，而以字节存储的str则必须加前缀 b。 6、布尔Python把0、空字符串’’和None看成 False，其他数值和非空字符串都看成 True。and 和 or 运算的一条重要法则：短路计算。（1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。（2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。例如：12print &apos;hello,&apos;,&apos;Python&apos; or &apos;world&apos; # ==&gt; hello, pythonprint &apos;hello,&apos;,&apos;&apos; and &apos;world&apos; # ==&gt; hello, 7、list（列表）Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。*构造list：直接用 [ ] 把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list。123L = [&apos;Michael&apos;, 100, True] # 由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，完全可以在list中包含各种类型数据。empty_l = [] # 一个元素也没有的list，就是空listprint L # ==&gt; [&apos;Michael&apos;, 100, True] *索引访问list：索引从0开始。使用索引时，千万注意不要越界！1234L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]print L[0] # ==&gt; Adamprint L[3] # ==&gt; 越界print L[-1] # ==&gt; Bart (倒序访问，‘-1’表示倒数第一个) *添加新元素：append()方法 一个参数，待添加元素内容。总是将新元素添加到list末尾。123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L.append(&apos;Paul&apos;)print L # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] insert()方法 两个参数，第一个是需添加位置索引号，第二个是待添加元素内容。新元素插入此索引标识位置，原来此位置以及后面元素都自动向后移动一位。123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L.insert(0, &apos;Paul&apos;)print L # ==&gt; [&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] *从list删除元素：pop()方法不加参数，总是删除list的最后一个元素，并返回这个元素。123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]print L.pop() # ==&gt; Bartprint L # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;] 一个参数，待删除元素位置的索引号。删除后，被删除元素后面元素自动前移。1234L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]L.pop(2)L.pop(2)print L # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;] *替换元素：123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L[0],L[2] = L[2],L[0] # ==&gt; 交换L[0],L[2]元素print L # ==&gt; [&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;] 8、tuple（元组）tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。*创建多元素tuple：12t = (0,1,2,3,4,5,6,7,8,9)print t # ==&gt; (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) 创建tuple和创建list唯一不同之处是用( )替代了[ ]；获取 tuple 元素的方式和 list 是一模一样的，可以正常使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素。*创建单元素tuple：12t = (1)print t # ==&gt; 1 因为( )既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。 正是因为用( )定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义：12t = (1,)print t # ==&gt; (1,) Python在打印单元素tuple时，也自动添加了一个“,”，为了更明确地告诉你这是一个tuple。 多元素 tuple 加不加这个额外的“,”效果是一样的：12t = (1, 2, 3,)print t # ==&gt; (1, 2, 3) 12t = ()print t # ==&gt; () 空tuple ***“可变”的tuple：12345t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])L = t[2]L[0] = &apos;X&apos;L[1] = &apos;Y&apos;print t # ==&gt; (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;]) 表面上，tuple是“可变”的了；实际上，tuple内的元素并没有发生改变，而是tuple里list的元素改变。tuple所谓的“不变”是说，tuple的每个元素，指向是永远不变！ 9、条件判断*if语句：12345age = 20if age &gt;= 18: print &apos;your age is&apos;, age print &apos;adult&apos;print &apos;END&apos; *注：（1）Python代码的缩进规则具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。缩进请严格按照Python的习惯写法：4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。（2） if 语句后接表达式，然后用:表示代码块开始。如果是在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车。 *if-else：1234if age &gt;= 18: print &apos;adult&apos;else: print &apos;teenager&apos; *注：else 后面有个“:”。 *if-elif-else：要避免嵌套结构的 if … else …，我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则。12345678if age &gt;= 18: print &apos;adult&apos;elif age &gt;= 6: #elif 意思就是 else if print &apos;teenager&apos;elif age &gt;= 3: print &apos;kid&apos;else: print &apos;baby&apos; 10、循环*for循环：（迭代所有元素）12for ... in ...: 循环体 123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]for name in L: print name *while循环：（根据表达式判断循环是否结束）12while ...循环判断表达式: 循环体 12345N = 10x = 0while x &lt; N: print x x = x + 1 while循环每次先判断 x &lt; N（循环判断表达式），如果为True，则执行循环体的代码块，否则，退出循环。*break:用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。12345678910111213141516171819202122# 计算 1 + 2 + 4 + 8 + 16 + ... 的前20项的和sum = 0x = 1n = 1while True: # i = x# while i &gt; 1:# i /= 2.0# if i == 1:# sum += x# n += 1# if n &gt; 20:# break# x += 1 sum += x x *= 2 n += 1 if n &gt; 20: breakprint sum # ==&gt; 1048575 *continue继续循环：可以用continue跳过后续循环代码，继续下一次循环。1234567891011# 计算0 - 100奇数的和sum = 0x = 0while True: x = x + 1 if x &gt; 100: break if not x % 2: continue sum += xprint sum # ==&gt; 2500 第二章 进阶1、dictlist 和 tuple 可以用来表示顺序集合，用 dict 表示“名字”-“成绩”的查找表*创建dict：12345d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59&#125; 把名字称为key，对应的成绩称为value，dict就是通过 key 来查找 value。花括号 { } 表示这是一个dict，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略。 *注：dict也是集合，len( ) 函数可以计算任意集合（list，tuple，dict）的大小。 12345678l = [1,2,3]t = (1,2,3,4,5)d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59&#125; # 一个 key-value 算一个print len(l),len(t),len(d) # ==&gt; 3 5 3 *访问dict：可以简单地使用 d[key] 的形式来查找对应的 value。通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：KeyError。print d[&#39;Adam&#39;] # ==&gt; 95要避免 KeyError 发生，有两种办法：一是先判断一下 key 是否存在，用 in 操作符：12if &apos;Paul&apos; in d: print d[&apos;Paul&apos;] 二是使用dict本身提供的一个 get 方法，在Key不存在的时候，返回None：12print d.get(&apos;Bart&apos;) # ==&gt; 59print d.get(&apos;Paul&apos;) # ==&gt; None *dict的特点：一是查找速度快，无论其中有多少元素，查找速度都一样，但缺点是占用内存大，还会浪费很多内容，而list占用内存小，但其查找速度随着元素增加而逐渐下降。由于dict是按 key 查找，所以，在一个dict中，key不能重复。二是存储的key-value序对是没有顺序的，这与list不一样。123456d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59&#125;print d # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125; 打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明dict内部是无序的，不能用dict存储有序的集合。三是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。但是list是可变的，就不能作为 key。*更新dict：dict是可变的，也就是说，我们可以随时往dict中添加新的 key-value。12345678d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59&#125;d[&apos;Paul&apos;] = 72 # 添加新的k-v对d[&apos;Bart&apos;] = 60 # 如果 key 已经存在，则赋值会用新的 value 替换掉原来的 valueprint d # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60&#125; *遍历dict：由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过 for 循环实现。1234567891011d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59&#125;for key in d: print key&apos;:&apos;d[key] # 结果：Lisa : 85# Adam : 95# Bart : 59 2、setdict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。*创建set：调用 set() 并传入一个 list，list的元素将作为set的元素12s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])print s # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;]) 打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。因为set不能包含重复的元素，所以，当我们传入包含重复元素的 list 会怎么样呢？12s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])print s,len(s) # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;]) 3 结果显示，set会自动去掉重复的元素。*访问set：由于set存储的是无序集合，所以我们没法通过索引来访问。访问 set中的某个元素实际上就是判断一个元素是否在set中。123s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])print &apos;Bart&apos; in s # ==&gt; Trueprint &apos;bart&apos; in s # ==&gt; False 对大小写敏感，’Bart’ 和 ‘bart’被认为是两个不同的元素。*set的特色：一是set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。二是set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。三是set存储的元素也是没有顺序的。123456weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;])x = &apos;???&apos; # 用户输入的字符串if x in weekdays: print &apos;input ok&apos;else: print &apos;input error&apos; *遍历set：由于 set 也是一个集合，所以，遍历 set 和遍历 list 类似，都可以通过 for 循环实现。1234567s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])for x in s: print x[0],&apos;:&apos;,x[1]# 结果：Lisa : 85# Adam : 95# Bart : 59 *更新set：一是把新的元素添加到set中；添加元素时，用set的add( )方法1234s = set([1, 2, 3])s.add(4) # 添加新元素s.add(3) # 如果添加的元素已经存在于set中，add()不会报错，但是不会加进去了print s # ==&gt; set([1, 2, 3, 4]) 二是把已有元素从set中删除删除set中的元素时，用set的remove( )方法1234s = set([1, 2, 3, 4])s.remove(4)# s.remove(5) 如果删除的元素不存在set中，remove()会报错print s # ==&gt; set([1, 2, 3]) *注：用add( )可以直接添加，而remove( )前需要判断。 123456789# 针对下面的set，给定一个list，对list中的每一个元素，如果在set中，就将其删除，如果不在set中，就添加进去。s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]for i in L: if i in s: s.remove(i) else: s.add(i)print s # ==&gt; set([&apos;Bart&apos;]) 3、函数*调用函数：调用一个函数，需要知道函数名和其参数。Python有许多内置函数，可直接调用。1234567# 计算 1*1 + 2*2 + 3*3 + ... + 100*100L = []i = 1while i &lt;= 100: L.append(pow(i,2)) i += 1 # sum()函数接受一个list作为参数，并返回list所有元素之和print sum(L) # ==&gt; 338350 *自定义（编写）函数：Python中，要定义一个函数需要使用def语句：依次写出函数名、括号、括号内参数以及冒号“:”，然后，在缩进块中编写函数体，函数返回值用return语句返回。如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。return None可以简写为return。12345678# 以自定义一个符号函数为例：def sgn(x): if x &gt; 0: return 1 elif x == 0: return 0 else: return -1 *返回多值：12345678910import mathdef quadratic_equation(a, b, c): x = (-b + math.sqrt(b*b-4*a*c))/(2*a) y = (-b - math.sqrt(pow(b,2)-4*a*c))/(2*a) return x,yxn,yn = quadratic_equation(2, 3, 0)print xn,yn # ==&gt; 0.0 -1.5print quadratic_equation(2, 3, 0) # ==&gt; (0.0, -1.5)print quadratic_equation(1, -6, 5) # ==&gt; (5.0, 1.0) math包提供了很多数学函数。由上述代码，从第一个print可见，我们可以同时获得多个返回值；但是，这其实是假象，由第二、三个print可见，这返回的仍然是单一值，返回值是一个tuple。在Python语法上，返回一个tuple可以省略括号，多个变量可以同时接收一个tuple，按位置赋值给对应变量。*递归函数：在函数内部，可以调用其他函数。如果一个函数在内部调用函数自身，这个函数就是递归函数。优点：定义简单，逻辑清晰。12345678# 阶乘def fact(n): if n &lt; 0: return &quot;ERROR,PLEASE INPUT AGAIN!&quot; elif n == 0 or n == 1: return 1 else: return n * fact(n - 1) *注：使用递归函数需要注意防止栈溢出!在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。 *定义默认参数：定义函数的时候，还可以有默认参数。12345def greet(s = &apos;world&apos;): print &apos;Hello, &apos;+s+&apos;.&apos;greet() # ==&gt; Hello, world.greet(&apos;Bart&apos;) # ==&gt; Hello, Bart. *注：默认参数只能定义在必需参数的后面。 *定义可变参数：如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：12def fn(*args): print args 可变参数名字前面有个*号。Python解释器会把传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。123456789101112def average(*args): sum = 0.0 if len(args) == 0: return 0.0 for i in args: sum += i ave = sum/len(args) return aveprint average() # ==&gt; 0.0print average(1, 2) # ==&gt; 1.5 print average(1, 2, 2, 3, 4) # ==&gt; 2.4 4、切片对于取指定索引范围的操作，可以用循环实现,但是十分繁琐；Python提供了切片（slice）操作符，大大简化操作。list与tuple，切片操作完全相同，只是切片结果一个是list，一个是tuple。L[a:b]表示从索引a开始取，直到索引b为止，但不包括索引b。若a等于0，可以省略；若a，b都省略，表示从头到尾取。L[a:b:c]参数c表示每c个取一个。12345L = range(1, 101)print L[:10] # ==&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 前10个数print L[2::3] # ==&gt; [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99] 3的倍数print L[4:50:5] # ==&gt; [5, 10, 15, 20, 25, 30, 35, 40, 45, 50] 不大于50的5的倍数 *倒序切片：1234L = range(1, 101)print L[-10:] # ==&gt; [91, 92, 93, 94, 95, 96, 97, 98, 99, 100] 最后10个数print L[54::5] # ==&gt; [55, 60, 65, 70, 75, 80, 85, 90, 95, 100] 最后10个5的倍数print L[-46::5] # 与上一行结果一样 记住倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引，与正序切片一样。*对字符串切片：字符串 ‘xxx’和 Unicode字符串 u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串。123456# 字符串有个方法 upper() 可以把字符变成大写字母，但它会把所有字母都变成大写。设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。def firstCharUpper(s,n=1): return s[:n].upper() + s[n:]print firstCharUpper(&apos;hello&apos;) # ==&gt; Helloprint firstCharUpper(&apos;sunday&apos;) # ==&gt; Sundayprint firstCharUpper(&apos;september&apos;) # ==&gt; September *注：Python2与Python3的差别很大 Python2 Python3 print 是语句，不需括号 是函数，需加括号 取值范围 xrange( , ) range( , ) 字符串存储 8-bit 16-bit Unicode 纠错机制 try:…except Exception, e :… try:…except Exception as e :… 打开文件 file(…..)或者open(……) 只能用open(…..) 键盘输入 raw_input( “提示信息” ) input( “提示信息” ) 除法 10/3=3 10/3=3.3333333333333335，更精确，而10//3=3，//是取整运算符 库的变化 …… …… 5、迭代在Python中，如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们成为迭代（Iteration）。在Python中，迭代是通过 for … in 来完成的。迭代操作就是对于一个集合，无论该集合是有序还是无序，我们用 for 循环总是可以依次取出集合的每一个元素。 *注：集合是指包含一组元素的数据结构，我们已经介绍的包括：（1）有序集合：list，tuple，str和unicode；（2）无序集合：set（3）无序集合并且具有 key-value 对：dict 而迭代是一个动词，它指的是一种操作。在Python中，就是 for 循环。123for i in range(1,101): if i % 7 == 0: print i # for循环迭代数列 1-100 并打印出7的倍数 *索引迭代：Python中，迭代永远是取出元素本身，而非元素的索引。对于有序集合，元素确实是有索引的。想在 for 循环中拿到索引，使用 enumerate( ) 函数：12345678L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]for index, name in enumerate(L): print index, &apos;-&apos;, name# ==&gt; 0 - Adam# 1 - Lisa# 2 - Bart# 3 - Paul 实际上，enumerate( ) 函数把：[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]变成了类似：[(0, &#39;Adam&#39;), (1, &#39;Lisa&#39;), (2, &#39;Bart&#39;), (3, &#39;Paul&#39;)]因此，此时迭代的每一个元素实际上是一个tuple。可见，索引迭代也不是真的按索引访问，而是由 enumerate( ) 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。123456789# 打印出名次 - 名字（名次从1开始）L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]for index, name in zip(range(1,len(L)+1),L): print index, &apos;-&apos;, name# ==&gt; 1 - Adam# 2 - Lisa# 3 - Bart# 4 - Paul *注：zip()函数可以把两个 list 变成一个 list：12zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])# [(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)] 迭代dict的value：用 for 循环直接迭代 dict，可以每次拿到dict的一个key。如果我们希望迭代 dict 对象的value，dict 对象有一个 values( ) 方法，这个方法把dict转换成一个包含所有value的list。dict除了values( )方法外，还有一个 itervalues( ) 方法，用 itervalues( ) 方法替代 values( ) 方法，迭代效果完全一样： 迭代dict的key和value：在一个 for 循环中，同时迭代 key和value，可以使用dict对象的items( )方法。12d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;print d.items() # ==&gt; [(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)] items() 方法把dict对象转换成了包含tuple的list。我们对这个list进行迭代，即可同时获得key和value。 *注：在Python3中，dict.iterkeys()、dict.itervalues()和dict.iteritems()方法将会移除。而且其中使用.keys()、.values()和.items()，它们会返回更轻量级的、类似于集合的容器对象，而不是返回一个列表（list）。 6、列表生成式*生成列表：如果要生成[1x1, 2x2, 3x3, …, 10x10]，一是可以用循环实现：12345L = []for x in range(1,11): L.append(x * x)print L # ==&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]# 太繁琐！ 二就是使用列表生成式：[x * x for x in range(1,11)]写列表生成式时，把要生成的元素放到前面，后面跟 for 循环，就可以把list创建出来。*复杂表达式：123456789d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;def generate_tr(name, score): return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; %(name, score)tds = [generate_tr(name, score) for name, score in d.items()]print &apos;&lt;table border=&quot;1&quot;&gt;&apos;print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;print &apos;\n&apos;.join(tds)print &apos;&lt;/table&gt;&apos; *注：字符串可以通过 % 进行格式化，用指定的参数替代 %s。字符串的join( )方法可以把一个 list 拼接成一个字符串。 *条件过滤：列表生成式的 for 循环后面还可以加上 if 判断。例如：如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：12[x * x for x in range(1,11) if x % 2 == 0]# [4, 16, 36, 64, 100] 有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。1234def toUppers(L): return [x.upper() for x in L if isinstance(x, str)]print toUppers([&apos;Hello&apos;, &apos;world&apos;, 101]) # ==&gt; [&apos;HELLO&apos;, &apos;WORLD&apos;] *注：isinstance(x, str) 可以判断变量 x 是否是字符串。 *多层表达式：for循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。123# 找出对称的 3 位数print [a*100 + b*10 + c for a in range(1,10) for b in range(0,10) for c in range(1,10) if a == c]# ==&gt; [101, 111, 121, 131, 141, 151, 161, 171, ......, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]]]></content>
      <tags>
        <tag>Learning</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
