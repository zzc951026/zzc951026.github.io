<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KEEP LEARNING</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-25T11:14:19.864Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Williams</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="http://yoursite.com/2019/04/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/23/Python学习笔记/</id>
    <published>2019-04-23T11:22:24.000Z</published>
    <updated>2019-04-25T11:14:19.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-基本功"><a href="#第一章-基本功" class="headerlink" title="第一章 基本功"></a>第一章 基本功</h2><h3 id="1、变量名命名规则"><a href="#1、变量名命名规则" class="headerlink" title="1、变量名命名规则"></a>1、变量名命名规则</h3><p>在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头</p><h3 id="2、print语句"><a href="#2、print语句" class="headerlink" title="2、print语句"></a>2、print语句</h3><p>print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。<br>print会依次打印每个字符串，遇到逗号“,”会输出一个空格。<br><code>print &#39;100 + 200 =&#39;, 100 + 200  # ==&gt; 100 + 200 = 300</code><br><a id="more"></a></p><h3 id="3、raw字符串"><a href="#3、raw字符串" class="headerlink" title="3、raw字符串"></a>3、raw字符串</h3><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。<br>为了避免这种情况，我们可以在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：<br><code>r&#39;\ (~_~)/ \ (~_~)/&#39;</code></p><h3 id="4、多行字符串"><a href="#4、多行字符串" class="headerlink" title="4、多行字符串"></a>4、多行字符串</h3><p>如果要表示多行字符串，可以用’’’…’’’表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p><p>与<br><code>&#39;Line 1\nLine 2\nLine 3&#39;</code><br>显示结果完全一样</p><h3 id="5、Unicode字符串"><a href="#5、Unicode字符串" class="headerlink" title="5、Unicode字符串"></a>5、Unicode字符串</h3><p>如果要正常输出中文，需要在字符串前面加一个前缀 u ，例如：print u‘中文’<br>并且需要在第一行添加注释# -<em>- coding: utf-8 -</em>-</p><blockquote><p>*注：<br>     （1）Python对缩进要求严格，输入代码前面不能空格；<br>     （2）Python是一种动态语言，赋值无需定义变量类型；<br>     （3）以上三种字符串可以混合使用；<br>     （4）用‘#’符号注释语句。</p></blockquote><h3 id="6、布尔"><a href="#6、布尔" class="headerlink" title="6、布尔"></a>6、布尔</h3><p>Python把0、空字符串’’和None看成 False，其他数值和非空字符串都看成 True。<br>and 和 or 运算的一条重要法则：短路计算。<br>（1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。<br>（2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &apos;hello,&apos;,&apos;Python&apos; or &apos;world&apos;   # ==&gt; hello, python</span><br><span class="line">print &apos;hello,&apos;,&apos;&apos; and &apos;world&apos;        # ==&gt; hello,</span><br></pre></td></tr></table></figure></p><h3 id="7、list（列表）"><a href="#7、list（列表）" class="headerlink" title="7、list（列表）"></a>7、list（列表）</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>*构造list：<br>直接用 [ ] 把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Michael&apos;, 100, True]     # 由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，完全可以在list中包含各种类型数据。</span><br><span class="line">empty_l = []                   # 一个元素也没有的list，就是空list</span><br><span class="line">print L                        # ==&gt; [&apos;Michael&apos;, 100, True]</span><br></pre></td></tr></table></figure></p><p>*索引访问list：<br>索引从0开始。使用索引时，千万注意不要越界！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">print L[0]    # ==&gt; Adam</span><br><span class="line">print L[3]    # ==&gt; 越界</span><br><span class="line">print L[-1]   # ==&gt; Bart (倒序访问，‘-1’表示倒数第一个)</span><br></pre></td></tr></table></figure></p><p>*添加新元素：<br>append()方法  一个参数，待添加元素内容。总是将新元素添加到list末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.append(&apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>insert()方法  两个参数，第一个是需添加位置索引号，第二个是待添加元素内容。新元素插入此索引标识位置，原来此位置以及后面元素都自动向后移动一位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.insert(0, &apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure></p><p>*从list删除元素：<br>pop()方法<br>不加参数，总是删除list的最后一个元素，并返回这个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">print L.pop() # ==&gt; Bart</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>一个参数，待删除元素位置的索引号。删除后，被删除元素后面元素自动前移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">L.pop(2)</span><br><span class="line">L.pop(2)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;]</span><br></pre></td></tr></table></figure></p><p>*替换元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L[0],L[2] = L[2],L[0]  # ==&gt; 交换L[0],L[2]元素</span><br><span class="line">print L                # ==&gt; [&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure></p><h3 id="8、tuple（元组）"><a href="#8、tuple（元组）" class="headerlink" title="8、tuple（元组）"></a>8、tuple（元组）</h3><p>tuple是另一种有序的列表，中文翻译为“ 元组 ”。<br>tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。<br>*创建多元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (0,1,2,3,4,5,6,7,8,9)</span><br><span class="line">print t                # ==&gt; (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure></p><p>创建tuple和创建list唯一不同之处是用( )替代了[ ]；<br>获取 tuple 元素的方式和 list 是一模一样的，可以正常使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素。<br>*创建单元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1)</span><br><span class="line">print t  # ==&gt; 1</span><br></pre></td></tr></table></figure></p><p>因为( )既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。</p><p>正是因为用( )定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1,)</span><br><span class="line">print t  # ==&gt; (1,) Python在打印单元素tuple时，也自动添加了一个“,”，为了更明确地告诉你这是一个tuple。</span><br></pre></td></tr></table></figure></p><p>多元素 tuple 加不加这个额外的“,”效果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1, 2, 3,)</span><br><span class="line">print t  # ==&gt; (1, 2, 3)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ()</span><br><span class="line">print t  # ==&gt; () 空tuple</span><br></pre></td></tr></table></figure><p>***“可变”的tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class="line">L = t[2]</span><br><span class="line">L[0] = &apos;X&apos;</span><br><span class="line">L[1] = &apos;Y&apos;</span><br><span class="line">print t  # ==&gt; (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure></p><p>表面上，tuple是“可变”的了；<br>实际上，tuple内的元素并没有发生改变，而是tuple里list的元素改变。<br>tuple所谓的“不变”是说，tuple的每个元素，指向是永远不变！</p><h3 id="9、条件判断"><a href="#9、条件判断" class="headerlink" title="9、条件判断"></a>9、条件判断</h3><p>*if语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;your age is&apos;, age</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">print &apos;END&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p><em>注：<br>（1）Python代码的缩进规则<br>具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。<br>缩进请严格按照Python的习惯写法：<br>4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。<br>（2） if 语句后接表达式，然后用:表示代码块开始。<br>如果是在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车。</em>if-else：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;teenager&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：else 后面有个“:”。</p></blockquote><p>*if-elif-else：<br>要避免嵌套结构的 if … else …，我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">elif age &gt;= 6:    #elif 意思就是 else if</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 3:    </span><br><span class="line">    print &apos;kid&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;baby&apos;</span><br></pre></td></tr></table></figure></p><h3 id="10、循环"><a href="#10、循环" class="headerlink" title="10、循环"></a>10、循环</h3><p>*for循环：（迭代所有元素）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for ... in ...:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">for name in L:</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>*while循环：（根据表达式判断循环是否结束）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while ...循环判断表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 10</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; N:</span><br><span class="line">    print x</span><br><span class="line">    x = x + 1</span><br></pre></td></tr></table></figure><p>while循环每次先判断 x &lt; N（循环判断表达式），如果为True，则执行循环体的代码块，否则，退出循环。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-基本功&quot;&gt;&lt;a href=&quot;#第一章-基本功&quot; class=&quot;headerlink&quot; title=&quot;第一章 基本功&quot;&gt;&lt;/a&gt;第一章 基本功&lt;/h2&gt;&lt;h3 id=&quot;1、变量名命名规则&quot;&gt;&lt;a href=&quot;#1、变量名命名规则&quot; class=&quot;headerlink&quot; title=&quot;1、变量名命名规则&quot;&gt;&lt;/a&gt;1、变量名命名规则&lt;/h3&gt;&lt;p&gt;在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头&lt;/p&gt;
&lt;h3 id=&quot;2、print语句&quot;&gt;&lt;a href=&quot;#2、print语句&quot; class=&quot;headerlink&quot; title=&quot;2、print语句&quot;&gt;&lt;/a&gt;2、print语句&lt;/h3&gt;&lt;p&gt;print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。&lt;br&gt;print会依次打印每个字符串，遇到逗号“,”会输出一个空格。&lt;br&gt;&lt;code&gt;print &amp;#39;100 + 200 =&amp;#39;, 100 + 200  # ==&amp;gt; 100 + 200 = 300&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
