<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KEEP LEARNING</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-04T14:28:09.237Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Williams</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记（进阶）</title>
    <link href="http://yoursite.com/2019/05/04/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/04/Python学习笔记（进阶）/</id>
    <published>2019-05-04T14:26:27.000Z</published>
    <updated>2019-05-04T14:28:09.237Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Python2" scheme="http://yoursite.com/tags/Python2/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（基础）</title>
    <link href="http://yoursite.com/2019/04/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/23/Python学习笔记（基础）/</id>
    <published>2019-04-23T11:22:24.000Z</published>
    <updated>2019-05-04T14:26:53.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-基本功"><a href="#第一章-基本功" class="headerlink" title="第一章 基本功"></a>第一章 基本功</h2><h3 id="1、变量名命名规则"><a href="#1、变量名命名规则" class="headerlink" title="1、变量名命名规则"></a>1、变量名命名规则</h3><p>在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头</p><h3 id="2、print语句"><a href="#2、print语句" class="headerlink" title="2、print语句"></a>2、print语句</h3><p>print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。<br>print会依次打印每个字符串，遇到逗号“,”会输出一个空格。<br><code>print &#39;100 + 200 =&#39;, 100 + 200  # ==&gt; 100 + 200 = 300</code><br><a id="more"></a></p><h3 id="3、raw字符串"><a href="#3、raw字符串" class="headerlink" title="3、raw字符串"></a>3、raw字符串</h3><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。<br>为了避免这种情况，我们可以在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：<br><code>r&#39;\ (~_~)/ \ (~_~)/&#39;</code></p><h3 id="4、多行字符串"><a href="#4、多行字符串" class="headerlink" title="4、多行字符串"></a>4、多行字符串</h3><p>如果要表示多行字符串，可以用’’’…’’’表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p><p>与<br><code>&#39;Line 1\nLine 2\nLine 3&#39;</code><br>显示结果完全一样</p><h3 id="5、Unicode字符串"><a href="#5、Unicode字符串" class="headerlink" title="5、Unicode字符串"></a>5、Unicode字符串</h3><p>如果要正常输出中文，需要在字符串前面加一个前缀 u ，例如：print u‘中文’<br>并且需要在第一行添加注释# -<em>- coding: utf-8 -</em>-</p><blockquote><p>*注：<br>     （1）Python对缩进要求严格，输入代码前面不能空格；<br>     （2）Python是一种动态语言，赋值无需定义变量类型；<br>     （3）以上三种字符串可以混合使用；<br>     （4）用‘#’符号注释语句。</p></blockquote><h3 id="6、布尔"><a href="#6、布尔" class="headerlink" title="6、布尔"></a>6、布尔</h3><p>Python把0、空字符串’’和None看成 False，其他数值和非空字符串都看成 True。<br>and 和 or 运算的一条重要法则：短路计算。<br>（1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。<br>（2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &apos;hello,&apos;,&apos;Python&apos; or &apos;world&apos;   # ==&gt; hello, python</span><br><span class="line">print &apos;hello,&apos;,&apos;&apos; and &apos;world&apos;        # ==&gt; hello,</span><br></pre></td></tr></table></figure></p><h3 id="7、list（列表）"><a href="#7、list（列表）" class="headerlink" title="7、list（列表）"></a>7、list（列表）</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>*构造list：<br>直接用 [ ] 把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Michael&apos;, 100, True]     # 由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，完全可以在list中包含各种类型数据。</span><br><span class="line">empty_l = []                   # 一个元素也没有的list，就是空list</span><br><span class="line">print L                        # ==&gt; [&apos;Michael&apos;, 100, True]</span><br></pre></td></tr></table></figure></p><p>*索引访问list：<br>索引从0开始。使用索引时，千万注意不要越界！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">print L[0]    # ==&gt; Adam</span><br><span class="line">print L[3]    # ==&gt; 越界</span><br><span class="line">print L[-1]   # ==&gt; Bart (倒序访问，‘-1’表示倒数第一个)</span><br></pre></td></tr></table></figure></p><p>*添加新元素：<br>append()方法  一个参数，待添加元素内容。总是将新元素添加到list末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.append(&apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>insert()方法  两个参数，第一个是需添加位置索引号，第二个是待添加元素内容。新元素插入此索引标识位置，原来此位置以及后面元素都自动向后移动一位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.insert(0, &apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure></p><p>*从list删除元素：<br>pop()方法<br>不加参数，总是删除list的最后一个元素，并返回这个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">print L.pop() # ==&gt; Bart</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>一个参数，待删除元素位置的索引号。删除后，被删除元素后面元素自动前移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">L.pop(2)</span><br><span class="line">L.pop(2)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;]</span><br></pre></td></tr></table></figure></p><p>*替换元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L[0],L[2] = L[2],L[0]  # ==&gt; 交换L[0],L[2]元素</span><br><span class="line">print L                # ==&gt; [&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure></p><h3 id="8、tuple（元组）"><a href="#8、tuple（元组）" class="headerlink" title="8、tuple（元组）"></a>8、tuple（元组）</h3><p>tuple是另一种有序的列表，中文翻译为“ 元组 ”。<br>tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。<br>*创建多元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (0,1,2,3,4,5,6,7,8,9)</span><br><span class="line">print t                # ==&gt; (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure></p><p>创建tuple和创建list唯一不同之处是用( )替代了[ ]；<br>获取 tuple 元素的方式和 list 是一模一样的，可以正常使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素。<br>*创建单元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1)</span><br><span class="line">print t  # ==&gt; 1</span><br></pre></td></tr></table></figure></p><p>因为( )既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。</p><p>正是因为用( )定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1,)</span><br><span class="line">print t  # ==&gt; (1,) Python在打印单元素tuple时，也自动添加了一个“,”，为了更明确地告诉你这是一个tuple。</span><br></pre></td></tr></table></figure></p><p>多元素 tuple 加不加这个额外的“,”效果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1, 2, 3,)</span><br><span class="line">print t  # ==&gt; (1, 2, 3)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ()</span><br><span class="line">print t  # ==&gt; () 空tuple</span><br></pre></td></tr></table></figure><p>***“可变”的tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class="line">L = t[2]</span><br><span class="line">L[0] = &apos;X&apos;</span><br><span class="line">L[1] = &apos;Y&apos;</span><br><span class="line">print t  # ==&gt; (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure></p><p>表面上，tuple是“可变”的了；<br>实际上，tuple内的元素并没有发生改变，而是tuple里list的元素改变。<br>tuple所谓的“不变”是说，tuple的每个元素，指向是永远不变！</p><h3 id="9、条件判断"><a href="#9、条件判断" class="headerlink" title="9、条件判断"></a>9、条件判断</h3><p>*if语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;your age is&apos;, age</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">print &apos;END&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>（1）Python代码的缩进规则<br>具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。<br>缩进请严格按照Python的习惯写法：<br>4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。<br>（2） if 语句后接表达式，然后用:表示代码块开始。<br>如果是在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车。</p></blockquote><p>*if-else：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;teenager&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>else 后面有个“:”。</p></blockquote><p>*if-elif-else：<br>要避免嵌套结构的 if … else …，我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">elif age &gt;= 6:    #elif 意思就是 else if</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 3:    </span><br><span class="line">    print &apos;kid&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;baby&apos;</span><br></pre></td></tr></table></figure></p><h3 id="10、循环"><a href="#10、循环" class="headerlink" title="10、循环"></a>10、循环</h3><p>*for循环：（迭代所有元素）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for ... in ...:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">for name in L:</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>*while循环：（根据表达式判断循环是否结束）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while ...循环判断表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 10</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; N:</span><br><span class="line">    print x</span><br><span class="line">    x = x + 1</span><br></pre></td></tr></table></figure><p>while循环每次先判断 x &lt; N（循环判断表达式），如果为True，则执行循环体的代码块，否则，退出循环。<br>*break:<br>用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 计算 1 + 2 + 4 + 8 + 16 + ... 的前20项的和</span><br><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">n = 1</span><br><span class="line">while True:</span><br><span class="line">    </span><br><span class="line">#   i = x</span><br><span class="line">#   while i &gt; 1:</span><br><span class="line">#       i /= 2.0</span><br><span class="line">#   if i == 1:</span><br><span class="line">#       sum += x</span><br><span class="line">#       n += 1</span><br><span class="line">#   if n &gt; 20:</span><br><span class="line">#       break</span><br><span class="line">#   x += 1</span><br><span class="line">    </span><br><span class="line">    sum += x</span><br><span class="line">    x *= 2</span><br><span class="line">    n += 1</span><br><span class="line">    if n &gt; 20:</span><br><span class="line">        break</span><br><span class="line">print sum    # ==&gt; 1048575</span><br></pre></td></tr></table></figure></p><p>*continue继续循环：<br>可以用continue跳过后续循环代码，继续下一次循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 计算0 - 100奇数的和</span><br><span class="line">sum = 0</span><br><span class="line">x = 0</span><br><span class="line">while True:</span><br><span class="line">    x = x + 1</span><br><span class="line">    if x &gt; 100:</span><br><span class="line">        break</span><br><span class="line">    if not x % 2:</span><br><span class="line">        continue</span><br><span class="line">    sum += x</span><br><span class="line">print sum   # ==&gt; 2500</span><br></pre></td></tr></table></figure></p><hr><h2 id="第二章-进阶"><a href="#第二章-进阶" class="headerlink" title="第二章 进阶"></a>第二章 进阶</h2><h3 id="1、dict"><a href="#1、dict" class="headerlink" title="1、dict"></a>1、dict</h3><p>list 和 tuple 可以用来表示顺序集合，<br>用 dict 表示“名字”-“成绩”的查找表<br>*创建dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把名字称为key，对应的成绩称为value，dict就是通过 key 来查找 value。<br>花括号 { } 表示这是一个dict，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略。</p><blockquote><p>*注：<br>dict也是集合，len( ) 函数可以计算任意集合（list，tuple，dict）的大小。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3]</span><br><span class="line">t = (1,2,3,4,5)</span><br><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;                           # 一个 key-value 算一个</span><br><span class="line">print len(l),len(t),len(d)  # ==&gt; 3 5 3</span><br></pre></td></tr></table></figure><p>*访问dict：<br>可以简单地使用 d[key] 的形式来查找对应的 value。<br>通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：KeyError。<br><code>print d[&#39;Adam&#39;] # ==&gt; 95</code><br>要避免 KeyError 发生，有两种办法：<br>一是先判断一下 key 是否存在，用 in 操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if &apos;Paul&apos; in d:</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>二是使用dict本身提供的一个 get 方法，在Key不存在的时候，返回None：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print d.get(&apos;Bart&apos;) # ==&gt; 59</span><br><span class="line">print d.get(&apos;Paul&apos;) # ==&gt; None</span><br></pre></td></tr></table></figure></p><p>*dict的特点：<br>一是查找速度快，无论其中有多少元素，查找速度都一样，但缺点是占用内存大，还会浪费很多内容，而list占用内存小，但其查找速度随着元素增加而逐渐下降。<br>由于dict是按 key 查找，所以，在一个dict中，key不能重复。<br>二是存储的key-value序对是没有顺序的，这与list不一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">print d  # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure></p><p>打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明dict内部是无序的，不能用dict存储有序的集合。<br>三是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。但是list是可变的，就不能作为 key。<br>*更新dict：<br>dict是可变的，也就是说，我们可以随时往dict中添加新的 key-value。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">d[&apos;Paul&apos;] = 72  # 添加新的k-v对</span><br><span class="line">d[&apos;Bart&apos;] = 60  # 如果 key 已经存在，则赋值会用新的 value 替换掉原来的 value</span><br><span class="line">print d         # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60&#125;</span><br></pre></td></tr></table></figure></p><p>*遍历dict：<br>由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过 for 循环实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">for key in d:</span><br><span class="line">    print key&apos;:&apos;d[key]</span><br><span class="line"></span><br><span class="line"># 结果：Lisa : 85</span><br><span class="line">#       Adam : 95</span><br><span class="line">#       Bart : 59</span><br></pre></td></tr></table></figure></p><h3 id="2、set"><a href="#2、set" class="headerlink" title="2、set"></a>2、set</h3><p>dict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。<br>set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。<br>*创建set：<br>调用 set() 并传入一个 list，list的元素将作为set的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line">print s     # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br></pre></td></tr></table></figure></p><p>打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。<br>因为set不能包含重复的元素，所以，当我们传入包含重复元素的 list 会怎么样呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])</span><br><span class="line">print s,len(s)   # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;]) 3</span><br></pre></td></tr></table></figure></p><p>结果显示，set会自动去掉重复的元素。<br>*访问set：<br>由于set存储的是无序集合，所以我们没法通过索引来访问。<br>访问 set中的某个元素实际上就是判断一个元素是否在set中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])</span><br><span class="line">print &apos;Bart&apos; in s  # ==&gt; True</span><br><span class="line">print &apos;bart&apos; in s  # ==&gt; False</span><br></pre></td></tr></table></figure></p><p>对大小写敏感，’Bart’ 和 ‘bart’被认为是两个不同的元素。<br>*set的特色：<br>一是set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。<br>二是set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。<br>三是set存储的元素也是没有顺序的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;])</span><br><span class="line">x = &apos;???&apos;  # 用户输入的字符串</span><br><span class="line">if x in weekdays:</span><br><span class="line">    print &apos;input ok&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;input error&apos;</span><br></pre></td></tr></table></figure></p><p>*遍历set：<br>由于 set 也是一个集合，所以，遍历 set 和遍历 list 类似，都可以通过 for 循环实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])</span><br><span class="line">for x in s:</span><br><span class="line">    print x[0],&apos;:&apos;,x[1]</span><br><span class="line"></span><br><span class="line"># 结果：Lisa : 85</span><br><span class="line">#       Adam : 95</span><br><span class="line">#       Bart : 59</span><br></pre></td></tr></table></figure></p><p>*更新set：<br>一是把新的元素添加到set中；<br>添加元素时，用set的add( )方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 2, 3])</span><br><span class="line">s.add(4)  # 添加新元素</span><br><span class="line">s.add(3)  # 如果添加的元素已经存在于set中，add()不会报错，但是不会加进去了</span><br><span class="line">print s   # ==&gt; set([1, 2, 3, 4])</span><br></pre></td></tr></table></figure></p><p>二是把已有元素从set中删除<br>删除set中的元素时，用set的remove( )方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 2, 3, 4])</span><br><span class="line">s.remove(4)</span><br><span class="line"># s.remove(5) 如果删除的元素不存在set中，remove()会报错</span><br><span class="line">print s  # ==&gt; set([1, 2, 3])</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>用add( )可以直接添加，而remove( )前需要判断。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 针对下面的set，给定一个list，对list中的每一个元素，如果在set中，就将其删除，如果不在set中，就添加进去。</span><br><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for i in L:</span><br><span class="line">    if i in s:</span><br><span class="line">        s.remove(i)</span><br><span class="line">    else:</span><br><span class="line">        s.add(i)</span><br><span class="line">print s  # ==&gt; set([&apos;Bart&apos;])</span><br></pre></td></tr></table></figure><h3 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h3><p>*调用函数：<br>调用一个函数，需要知道函数名和其参数。<br>Python有许多<a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="noopener">内置函数</a>，可直接调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 计算 1*1 + 2*2 + 3*3 + ... + 100*100</span><br><span class="line">L = []</span><br><span class="line">i = 1</span><br><span class="line">while i &lt;= 100:</span><br><span class="line">    L.append(pow(i,2))</span><br><span class="line">    i += 1    # sum()函数接受一个list作为参数，并返回list所有元素之和</span><br><span class="line">print sum(L)  # ==&gt; 338350</span><br></pre></td></tr></table></figure></p><p>*自定义（编写）函数：<br>Python中，要定义一个函数需要使用def语句：<br>依次写出函数名、括号、括号内参数以及冒号“:”，然后，在缩进块中编写函数体，函数返回值用return语句返回。<br>如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。<br>return None可以简写为return。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 以自定义一个符号函数为例：</span><br><span class="line">def sgn(x):</span><br><span class="line">    if x &gt; 0:</span><br><span class="line">    return 1</span><br><span class="line">    elif x == 0:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">    return -1</span><br></pre></td></tr></table></figure></p><p>*返回多值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def quadratic_equation(a, b, c):</span><br><span class="line">    x = (-b + math.sqrt(b*b-4*a*c))/(2*a)</span><br><span class="line">    y = (-b - math.sqrt(pow(b,2)-4*a*c))/(2*a)</span><br><span class="line">    return x,y</span><br><span class="line">xn,yn = quadratic_equation(2, 3, 0)</span><br><span class="line">print xn,yn                         # ==&gt; 0.0 -1.5</span><br><span class="line">print quadratic_equation(2, 3, 0)   # ==&gt; (0.0, -1.5)</span><br><span class="line">print quadratic_equation(1, -6, 5)  # ==&gt; (5.0, 1.0)</span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/u011225629/article/details/78458724" target="_blank" rel="noopener">math包</a>提供了很多数学函数。<br>由上述代码，从第一个print可见，我们可以同时获得多个返回值；<br>但是，这其实是假象，由第二、三个print可见，这返回的仍然是单一值，返回值是一个tuple。<br>在Python语法上，返回一个tuple可以省略括号，多个变量可以同时接收一个tuple，按位置赋值给对应变量。<br>*递归函数：<br>在函数内部，可以调用其他函数。如果一个函数在内部调用函数自身，这个函数就是递归函数。<br>优点：定义简单，逻辑清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 阶乘</span><br><span class="line">def fact(n):</span><br><span class="line">    if n &lt; 0:</span><br><span class="line">        return &quot;ERROR,PLEASE INPUT AGAIN!&quot;</span><br><span class="line">    elif n == 0 or n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">    return n * fact(n - 1)</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>使用递归函数需要注意防止栈溢出!在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p></blockquote><p>*定义默认参数：<br>定义函数的时候，还可以有默认参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def greet(s = &apos;world&apos;):</span><br><span class="line">    print &apos;Hello, &apos;+s+&apos;.&apos;</span><br><span class="line"></span><br><span class="line">greet()        # ==&gt; Hello, world.</span><br><span class="line">greet(&apos;Bart&apos;)  # ==&gt; Hello, Bart.</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>默认参数只能定义在必需参数的后面。</p></blockquote><p>*定义可变参数：<br>如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fn(*args):</span><br><span class="line">    print args</span><br></pre></td></tr></table></figure></p><p>可变参数名字前面有个*号。Python解释器会把传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def average(*args):</span><br><span class="line">    sum = 0.0</span><br><span class="line">    if len(args) == 0:</span><br><span class="line">        return 0.0</span><br><span class="line">    for i in args:</span><br><span class="line">        sum += i</span><br><span class="line">    ave = sum/len(args)    </span><br><span class="line">    return ave</span><br><span class="line"></span><br><span class="line">print average()               # ==&gt; 0.0</span><br><span class="line">print average(1, 2)           # ==&gt; 1.5   </span><br><span class="line">print average(1, 2, 2, 3, 4)  # ==&gt; 2.4</span><br></pre></td></tr></table></figure></p><h3 id="4、切片"><a href="#4、切片" class="headerlink" title="4、切片"></a>4、切片</h3><p>对于取指定索引范围的操作，可以用循环实现,但是十分繁琐；<br>Python提供了切片（slice）操作符，大大简化操作。<br>list与tuple，切片操作完全相同，只是切片结果一个是list，一个是tuple。<br><code>L[a:b]</code><br>表示从索引a开始取，直到索引b为止，但不包括索引b。<br>若a等于0，可以省略；<br>若a，b都省略，表示从头到尾取。<br><code>L[a:b:c]</code><br>参数c表示每c个取一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = range(1, 101)</span><br><span class="line"></span><br><span class="line">print L[:10]     # ==&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 前10个数</span><br><span class="line">print L[2::3]    # ==&gt; [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99] 3的倍数</span><br><span class="line">print L[4:50:5]  # ==&gt; [5, 10, 15, 20, 25, 30, 35, 40, 45, 50] 不大于50的5的倍数</span><br></pre></td></tr></table></figure></p><p>*倒序切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = range(1, 101)</span><br><span class="line">print L[-10:]    # ==&gt; [91, 92, 93, 94, 95, 96, 97, 98, 99, 100] 最后10个数</span><br><span class="line">print L[54::5]   # ==&gt; [55, 60, 65, 70, 75, 80, 85, 90, 95, 100] 最后10个5的倍数</span><br><span class="line">print L[-46::5]  # 与上一行结果一样</span><br></pre></td></tr></table></figure></p><p>记住倒数第一个元素的索引是-1。<br>倒序切片包含起始索引，不包含结束索引，与正序切片一样。<br>*对字符串切片：<br>字符串 ‘xxx’和 Unicode字符串 u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 字符串有个方法 upper() 可以把字符变成大写字母，但它会把所有字母都变成大写。设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。</span><br><span class="line">def firstCharUpper(s,n=1):</span><br><span class="line">    return s[:n].upper() + s[n:]</span><br><span class="line">print firstCharUpper(&apos;hello&apos;)      # ==&gt; Hello</span><br><span class="line">print firstCharUpper(&apos;sunday&apos;)     # ==&gt; Sunday</span><br><span class="line">print firstCharUpper(&apos;september&apos;)  # ==&gt; September</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br><a href="https://www.imooc.com/qadetail/307834" target="_blank" rel="noopener">Python2与Python3的差别很大</a></p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Python2</th><th style="text-align:center">Python3</th></tr></thead><tbody><tr><td style="text-align:center">print</td><td style="text-align:center">是语句，不需括号</td><td style="text-align:center">是函数，需加括号</td></tr><tr><td style="text-align:center">取值范围</td><td style="text-align:center">xrange( , )</td><td style="text-align:center">range( , )</td></tr><tr><td style="text-align:center">字符串存储</td><td style="text-align:center">8-bit</td><td style="text-align:center">16-bit Unicode</td></tr><tr><td style="text-align:center">纠错机制</td><td style="text-align:center">try:…except Exception, e :…</td><td style="text-align:center">try:…except Exception as e :…</td></tr><tr><td style="text-align:center">打开文件</td><td style="text-align:center">file(…..)或者open(……)</td><td style="text-align:center">只能用open(…..)</td></tr><tr><td style="text-align:center">键盘输入</td><td style="text-align:center">raw_input( “提示信息” )</td><td style="text-align:center">input( “提示信息” )</td></tr><tr><td style="text-align:center">除法</td><td style="text-align:center">10/3=3</td><td style="text-align:center">10/3=3.3333333333333335，更精确，而10//3=3，//是取整运算符</td></tr><tr><td style="text-align:center">库的变化</td><td style="text-align:center">……</td><td style="text-align:center">……</td></tr></tbody></table><h3 id="5、迭代"><a href="#5、迭代" class="headerlink" title="5、迭代"></a>5、迭代</h3><p>在Python中，如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们成为迭代（Iteration）。<br>在Python中，迭代是通过 for … in 来完成的。迭代操作就是对于一个集合，无论该集合是有序还是无序，我们用 for 循环总是可以依次取出集合的每一个元素。</p><blockquote><p>*注：<br>集合是指包含一组元素的数据结构，我们已经介绍的包括：<br>（1）有序集合：list，tuple，str和unicode；<br>（2）无序集合：set<br>（3）无序集合并且具有 key-value 对：dict</p></blockquote><p>而迭代是一个动词，它指的是一种操作。在Python中，就是 for 循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,101):</span><br><span class="line">    if i % 7 == 0:</span><br><span class="line">        print i  # for循环迭代数列 1-100 并打印出7的倍数</span><br></pre></td></tr></table></figure></p><p>*索引迭代：<br>Python中，迭代永远是取出元素本身，而非元素的索引。<br>对于有序集合，元素确实是有索引的。想在 for 循环中拿到索引，使用 enumerate( ) 函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for index, name in enumerate(L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br><span class="line"></span><br><span class="line"># ==&gt; 0 - Adam</span><br><span class="line">#     1 - Lisa</span><br><span class="line">#     2 - Bart</span><br><span class="line">#     3 - Paul</span><br></pre></td></tr></table></figure></p><p>实际上，enumerate( ) 函数把：<br><code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]</code><br>变成了类似：<br><code>[(0, &#39;Adam&#39;), (1, &#39;Lisa&#39;), (2, &#39;Bart&#39;), (3, &#39;Paul&#39;)]</code><br>因此，此时迭代的每一个元素实际上是一个tuple。<br>可见，索引迭代也不是真的按索引访问，而是由 enumerate( ) 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 打印出名次 - 名字（名次从1开始）</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for index, name in zip(range(1,len(L)+1),L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br><span class="line"></span><br><span class="line"># ==&gt; 1 - Adam</span><br><span class="line">#     2 - Lisa</span><br><span class="line">#     3 - Bart</span><br><span class="line">#     4 - Paul</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>zip()函数可以把两个 list 变成一个 list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line"># [(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)]</span><br></pre></td></tr></table></figure></p></blockquote><p><em>迭代dict的value：<br>用 for 循环直接迭代 dict，可以每次拿到dict的一个key。<br>如果我们希望迭代 dict 对象的value，dict 对象有一个 values( ) 方法，这个方法把dict转换成一个包含所有value的list。<br>dict除了values( )方法外，还有一个 itervalues( ) 方法，用 itervalues( ) 方法替代 values( ) 方法，迭代效果完全一样：</em>迭代dict的key和value：<br>在一个 for 循环中，同时迭代 key和value，可以使用dict对象的items( )方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.items()  # ==&gt; [(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)]</span><br></pre></td></tr></table></figure></p><p>items() 方法把dict对象转换成了包含tuple的list。我们对这个list进行迭代，即可同时获得key和value。</p><blockquote><p>*注：<br>在Python3中，dict.iterkeys()、dict.itervalues()和dict.iteritems()方法将会移除。<br>而且其中使用.keys()、.values()和.items()，它们会返回更轻量级的、类似于集合的容器对象，而不是返回一个列表（list）。</p></blockquote><h3 id="6、列表生成式"><a href="#6、列表生成式" class="headerlink" title="6、列表生成式"></a>6、列表生成式</h3><p>*生成列表：<br>如果要生成[1x1, 2x2, 3x3, …, 10x10]，<br>一是可以用循环实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">for x in range(1,11):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">print L  # ==&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"># 太繁琐！</span><br></pre></td></tr></table></figure></p><p>二就是使用列表生成式：<br><code>[x * x for x in range(1,11)]</code><br>写列表生成式时，把要生成的元素放到前面，后面跟 for 循环，就可以把list创建出来。<br>*复杂表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">def generate_tr(name, score):</span><br><span class="line">    return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; %(name, score)</span><br><span class="line"></span><br><span class="line">tds = [generate_tr(name, score) for name, score in d.items()]</span><br><span class="line">print &apos;&lt;table border=&quot;1&quot;&gt;&apos;</span><br><span class="line">print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;</span><br><span class="line">print &apos;\n&apos;.join(tds)</span><br><span class="line">print &apos;&lt;/table&gt;&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>字符串可以通过 % 进行格式化，用指定的参数替代 %s。字符串的join( )方法可以把一个 list 拼接成一个字符串。</p></blockquote><p>*条件过滤：<br>列表生成式的 for 循环后面还可以加上 if 判断。<br>例如：如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,11) if x % 2 == 0]</span><br><span class="line"># [4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure></p><p>有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def toUppers(L):</span><br><span class="line">    return [x.upper() for x in L if isinstance(x, str)]</span><br><span class="line"></span><br><span class="line">print toUppers([&apos;Hello&apos;, &apos;world&apos;, 101])  # ==&gt; [&apos;HELLO&apos;, &apos;WORLD&apos;]</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>isinstance(x, str) 可以判断变量 x 是否是字符串。</p></blockquote><p>*多层表达式：<br>for循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 找出对称的 3 位数</span><br><span class="line">print [a*100 + b*10 + c for a in range(1,10) for b in range(0,10) for c in range(1,10) if a == c]</span><br><span class="line"># ==&gt; [101, 111, 121, 131, 141, 151, 161, 171, ......, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-基本功&quot;&gt;&lt;a href=&quot;#第一章-基本功&quot; class=&quot;headerlink&quot; title=&quot;第一章 基本功&quot;&gt;&lt;/a&gt;第一章 基本功&lt;/h2&gt;&lt;h3 id=&quot;1、变量名命名规则&quot;&gt;&lt;a href=&quot;#1、变量名命名规则&quot; class=&quot;headerlink&quot; title=&quot;1、变量名命名规则&quot;&gt;&lt;/a&gt;1、变量名命名规则&lt;/h3&gt;&lt;p&gt;在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头&lt;/p&gt;
&lt;h3 id=&quot;2、print语句&quot;&gt;&lt;a href=&quot;#2、print语句&quot; class=&quot;headerlink&quot; title=&quot;2、print语句&quot;&gt;&lt;/a&gt;2、print语句&lt;/h3&gt;&lt;p&gt;print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。&lt;br&gt;print会依次打印每个字符串，遇到逗号“,”会输出一个空格。&lt;br&gt;&lt;code&gt;print &amp;#39;100 + 200 =&amp;#39;, 100 + 200  # ==&amp;gt; 100 + 200 = 300&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python2" scheme="http://yoursite.com/tags/Python2/"/>
    
  </entry>
  
</feed>
