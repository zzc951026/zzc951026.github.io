<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KEEP LEARNING</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-26T10:04:13.422Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Williams</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]人工智能教程</title>
    <link href="http://yoursite.com/2019/05/26/%E8%BD%AC-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/05/26/转-人工智能教程/</id>
    <published>2019-05-26T08:55:51.000Z</published>
    <updated>2019-05-26T10:04:13.422Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jiangjunshow" target="_blank" rel="noopener">人工智能教程</a></p><p><a href="https://blog.csdn.net/ritterliu/article/details/54821300" target="_blank" rel="noopener">机器学习入门好文，强烈推荐</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/jiangjunshow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人工智能教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ritterliu/ar
      
    
    </summary>
    
    
      <category term="Learning" scheme="http://yoursite.com/tags/Learning/"/>
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>美图分享</title>
    <link href="http://yoursite.com/2019/05/24/%E7%BE%8E%E5%9B%BE%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2019/05/24/美图分享/</id>
    <published>2019-05-24T15:53:54.000Z</published>
    <updated>2019-05-25T06:35:13.610Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/24/美图分享/魔道祖师.jpg" title="魔道祖师"><a id="more"></a><img src="/2019/05/24/美图分享/魔道祖师01.jpg" title="魔道祖师"><img src="/2019/05/24/美图分享/魔道祖师02.jpg" title="魔道祖师"><img src="/2019/05/24/美图分享/Python.jpg" title="Python"><img src="/2019/05/24/美图分享/Python01.jpg" title="Python"><img src="/2019/05/24/美图分享/Python02.jpg" title="Python"><img src="/2019/05/24/美图分享/Ferrari.jpg" title="Ferrari"><img src="/2019/05/24/美图分享/Ferrari01.jpg" title="Ferrari"><img src="/2019/05/24/美图分享/Lamborghini.jpg" title="Lamborghini"><img src="/2019/05/24/美图分享/巫妖王.jpg" title="巫妖王"><img src="/2019/05/24/美图分享/刺客信条.jpg" title="刺客信条"><img src="/2019/05/24/美图分享/刺客信条01.jpg" title="刺客信条"><img src="/2019/05/24/美图分享/Scarlett_Johansson.jpg" title="Scarlett_Johansson"><img src="/2019/05/24/美图分享/Taylor_Swift.jpg" title="Taylor_Swift"><img src="/2019/05/24/美图分享/Taylor_Swift01.jpg" title="Taylor_Swift"><img src="/2019/05/24/美图分享/Taylor_Swift02.jpg" title="Taylor_Swift"><img src="/2019/05/24/美图分享/Taylor_Swift03.jpg" title="Taylor_Swift"><img src="/2019/05/24/美图分享/宝蓝.jpg" title="宝蓝"><img src="/2019/05/24/美图分享/宝蓝01.jpg" title="宝蓝"><img src="/2019/05/24/美图分享/宝蓝02.jpg" title="宝蓝"><img src="/2019/05/24/美图分享/林允儿05.jpg" title="林允儿"><img src="/2019/05/24/美图分享/林允儿.jpg" title="林允儿"><img src="/2019/05/24/美图分享/林允儿02.jpg" title="林允儿"><img src="/2019/05/24/美图分享/林允儿03.jpg" title="林允儿"><img src="/2019/05/24/美图分享/林允儿04.jpg" title="林允儿"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1316479227&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/05/24/美图分享/魔道祖师.jpg&quot; title=&quot;魔道祖师&quot;&gt;
    
    </summary>
    
    
      <category term="Pic" scheme="http://yoursite.com/tags/Pic/"/>
    
  </entry>
  
  <entry>
    <title>烟雨青黛</title>
    <link href="http://yoursite.com/2019/05/04/%E7%83%9F%E9%9B%A8%E9%9D%92%E9%BB%9B/"/>
    <id>http://yoursite.com/2019/05/04/烟雨青黛/</id>
    <published>2019-05-04T14:37:58.000Z</published>
    <updated>2019-05-04T15:05:13.977Z</updated>
    
    <content type="html"><![CDATA[<p>人生路远（陆远），<br>唯有忘的干净（甘敬），<br>才能拥有将来（江莱）。<br><a id="more"></a><br><a href="https://www.iqiyi.com/v_19rrlfuf9w.html?vfm=2008_aldbd" target="_blank" rel="noopener"><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=b789e904cd8065386fe7ac41f6b4ca21/37d12f2eb9389b506b588c188235e5dde6116ed0.jpg" alt="好先生" title="好先生"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=418257492&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生路远（陆远），&lt;br&gt;唯有忘的干净（甘敬），&lt;br&gt;才能拥有将来（江莱）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="music" scheme="http://yoursite.com/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（进阶）</title>
    <link href="http://yoursite.com/2019/05/04/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/04/Python学习笔记（进阶）/</id>
    <published>2019-05-04T14:26:27.000Z</published>
    <updated>2019-05-26T08:57:16.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-函数式编程"><a href="#第一章-函数式编程" class="headerlink" title="第一章 函数式编程"></a>第一章 函数式编程</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><ul><li>函数：function（基础学过）</li><li>函数式：functional（一种编程范式）</li></ul><p>函数式编程是一种抽象计算的编程模式。<br><a id="more"></a></p><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><ul><li>把计算视为函数而非指令</li><li>纯函数式编程：不需要变量，没有副作用，测试简单</li><li>支持高阶函数，代码简洁</li></ul><h3 id="3、Python支持的函数式编程"><a href="#3、Python支持的函数式编程" class="headerlink" title="3、Python支持的函数式编程"></a>3、Python支持的函数式编程</h3><ul><li>不是纯函数式编程：允许有变量</li><li>支持高阶函数：函数也可以作为变量传入</li><li>支持闭包：有了闭包就能返回函数</li><li>有限度地支持匿名函数</li></ul><h3 id="4、高阶函数"><a href="#4、高阶函数" class="headerlink" title="4、高阶函数"></a>4、高阶函数</h3><ul><li>变量可以指向函数</li><li>函数名其实就是指向函数的变量</li></ul><p>高阶函数：能接收函数做参数的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def add(x,y,f):</span><br><span class="line">    return f(x) + f(y)</span><br><span class="line"></span><br><span class="line">print (add(-9,6,abs))        # ==&gt; 15</span><br><span class="line">print (add(25,9,math.sqrt))  # ==&gt; 8.0</span><br></pre></td></tr></table></figure><h3 id="5、map-函数"><a href="#5、map-函数" class="headerlink" title="5、map()函数"></a>5、map()函数</h3><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><blockquote><p>*注：<br>map()函数不改变原有的 list，而是返回一个新的 list。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def format_name(s):</span><br><span class="line">#   return s[0].upper() + s[1:].lower()</span><br><span class="line">    return s.capitalize()                                 # capitalize()将字符串的第一个字母变成大写,其他字母变小写</span><br><span class="line">        </span><br><span class="line">print (list(map(format_name, [&apos;adam&apos;, &apos;LISA&apos;, &apos;barT&apos;])))  # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line"></span><br><span class="line"># Python2中返回list的高阶函数，而在Python3中返回的不是list，若需要打印list，则用list()</span><br></pre></td></tr></table></figure><h3 id="6、reduce-函数"><a href="#6、reduce-函数" class="headerlink" title="6、reduce()函数"></a>6、reduce()函数</h3><p>reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。<br>reduce()还可以接收第3个可选参数，作为计算的初始值。那么第一轮计算就是初始值与list里面第一个元素做传入函数操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 求积函数</span><br><span class="line"></span><br><span class="line">from functools import reduce            # python 3.0以后, reduce已经不在built-in function里了, 要用它就得from functools import reduce</span><br><span class="line"></span><br><span class="line">def prod(x, y):</span><br><span class="line">    return x * y</span><br><span class="line"></span><br><span class="line">print (reduce(prod, [2, 4, 5, 7, 12]))  # ==&gt; 3360</span><br></pre></td></tr></table></figure></p><h3 id="7、filter-函数"><a href="#7、filter-函数" class="headerlink" title="7、filter()函数"></a>7、filter()函数</h3><p>filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><blockquote><p>*注：<br>s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。<br>当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;     \t123\r\n&apos;</span><br><span class="line">a.strip()  # &apos;123&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 过滤出1~100中平方根是整数的数</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def is_sqr(x):</span><br><span class="line">#   return int(math.sqrt(x)) == math.sqrt(x)</span><br><span class="line">    return math.sqrt(x) % 1 == 0</span><br><span class="line"># 以上两种实现方法</span><br><span class="line">print (list(filter(is_sqr, range(1, 101))))  # ==&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line"># Python2中返回list的高阶函数，而在Python3中返回的不是list，若需要打印list，则用list()</span><br></pre></td></tr></table></figure><h3 id="8、自定义排序函数"><a href="#8、自定义排序函数" class="headerlink" title="8、自定义排序函数"></a>8、自定义排序函数</h3><blockquote><p>*注：<br>Python2的sorted()函数：sorted(iterable，cmp，key，reverse）<br>Python3中的sorted()函数：少了cmp参数。<br>参数： </p><ul><li>iterable可以是list或者iterator； </li><li>cmp是带两个参数的比较函数； </li><li>key 是带一个参数的函数； </li><li>reverse为False或者True；</li></ul></blockquote><p>Python内置的 sorted()函数可对list进行排序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted([36, 5, 12, 9, 21])</span><br><span class="line"># [5, 9, 12, 21, 36]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted([36, 5, 12, 9, 21],reverse = True)</span><br><span class="line"># [36, 21, 12, 9, 5]</span><br></pre></td></tr></table></figure><p>sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序。<br>比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def cmp_ignore_case(s1, s2):</span><br><span class="line">    a = s1.lower()</span><br><span class="line">    b = s2.lower()</span><br><span class="line">    if a &gt; b:</span><br><span class="line">        return 1</span><br><span class="line">    elif a &lt; b:</span><br><span class="line">        return -1</span><br><span class="line">    else:</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line">print sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], cmp_ignore_case)</span><br><span class="line"># ==&gt; [&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br></pre></td></tr></table></figure></p><h3 id="9、返回函数"><a href="#9、返回函数" class="headerlink" title="9、返回函数"></a>9、返回函数</h3><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def f():</span><br><span class="line">    print (&apos;call f()...&apos;)</span><br><span class="line">    # 定义函数g:</span><br><span class="line">    def g():</span><br><span class="line">        print (&apos;call g()...&apos;)</span><br><span class="line">    # 返回函数g:</span><br><span class="line">    return g</span><br><span class="line">x = f()  # ==&gt; call f()...</span><br><span class="line">x()      # ==&gt; call g()...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def calc_prod(lst):</span><br><span class="line">    def prod():</span><br><span class="line">        return reduce(lambda x,y : x * y,lst)</span><br><span class="line">    return prod</span><br><span class="line"></span><br><span class="line">f = calc_prod([1, 2, 3, 4])</span><br><span class="line">print (f())  # ==&gt; 24</span><br></pre></td></tr></table></figure><blockquote><p>*注：<br>关于Python中的lambda见下11。</p></blockquote><h3 id="10、闭包"><a href="#10、闭包" class="headerlink" title="10、闭包"></a>10、闭包</h3><p>内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def calc_sum(lst):</span><br><span class="line">    def lazy_sum():</span><br><span class="line">        return sum(lst)</span><br><span class="line">    return lazy_sum</span><br><span class="line"># 没法把 lazy_sum 移到 calc_sum 的外部</span><br><span class="line"># 因为它引用了 calc_sum 的参数 lst</span><br></pre></td></tr></table></figure></p><p>闭包的特点：<br>返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 希望一次返回3个函数，分别计算1x1,2x2,3x3:</span><br><span class="line">def count():</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        def f():</span><br><span class="line">             return i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    return fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">print f1(), f2(), f3() # ==&gt; 9 9 9</span><br></pre></td></tr></table></figure></p><p>认为调用f1()，f2()和f3()结果应该是1 4 9，但实际结果全部都是 9。<br>原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。<br>因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 改正上述程序</span><br><span class="line">def count():</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        def f(i):</span><br><span class="line">            return lambda : i*i</span><br><span class="line">        fs.append(f(i))</span><br><span class="line">    return fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">print f1(), f2(), f3() # ==&gt; 1 4 9</span><br></pre></td></tr></table></figure></p><h3 id="11、匿名函数"><a href="#11、匿名函数" class="headerlink" title="11、匿名函数"></a>11、匿名函数</h3><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。<br>以map()函数为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map(lambda x: x * x, [1, 2, 3, 4, 5, 6])</span><br><span class="line"># [1, 4, 9, 16, 25, 36]</span><br></pre></td></tr></table></figure></p><ul><li>关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。</li><li>匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。</li><li>使用匿名函数，可以不必定义函数名，直接创建一个函数对象。</li><li>返回函数时，也可以返回匿名函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myabs = lambda x: -x if x &lt; 0 else x</span><br><span class="line">print(myabs(-1))  # ==&gt; 1</span><br><span class="line">print(myabs(1))   # ==&gt; 1</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def is_not_empty(s):</span><br><span class="line">    return s and len(s.strip()) &gt; 0</span><br><span class="line"></span><br><span class="line">print (list(filter(is_not_empty, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos;  &apos;, &apos;END&apos;])))</span><br><span class="line"># ==&gt; [&apos;test&apos;, &apos;str&apos;, &apos;END&apos;]</span><br></pre></td></tr></table></figure><p>简化为：<br><code>print (list(filter(lambda s: s and len(s.strip()) &gt; 0, [&#39;test&#39;, None, &#39;&#39;, &#39;str&#39;, &#39;  &#39;, &#39;END&#39;])))</code></p><blockquote><p>*注：<br><a href="https://blog.csdn.net/zjuxsl/article/details/79437563" target="_blank" rel="noopener">详细讲解关于Python中的lambda</a></p></blockquote><h3 id="12、decorator装饰器"><a href="#12、decorator装饰器" class="headerlink" title="12、decorator装饰器"></a>12、decorator装饰器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def newfn(f):</span><br><span class="line">def fn(x):</span><br><span class="line">print (&apos;call&apos;+f.__name__+&apos;...&apos;)</span><br><span class="line">return f(x)</span><br><span class="line">return fn</span><br><span class="line">def f1(x):</span><br><span class="line">    return x*2</span><br><span class="line">f1 = newfn(f1)</span><br><span class="line">print (f1(5))</span><br><span class="line"># ==&gt; callf1...</span><br><span class="line"># ==&gt; 10</span><br></pre></td></tr></table></figure><p>Python内置的@语法就是为了简化装饰器调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@newfn</span><br><span class="line">def f1(x):</span><br><span class="line">    return x*2</span><br></pre></td></tr></table></figure></p><p>= = &gt; &gt; &gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def f1(x):</span><br><span class="line">    return x*2</span><br><span class="line">f1 = newfn(f1)</span><br></pre></td></tr></table></figure></p><p>*装饰器的作用：<br>可以极大地简化代码，避免每个函数编写重复性代码。</p><ul><li>打印日志：@log</li><li>检测性能：@performance</li><li>数据库事务：@transaction</li><li>URL路由：@post(‘/register’)</li></ul><p>*无参数decorator：<br>Python的 decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。<br>使用 decorator 用Python提供的 @ 语法，这样可以避免手动编写 f = decorate(f) 这样的代码。<br>以@log为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def log(f):</span><br><span class="line">    def fn(x):</span><br><span class="line">        print &apos;call &apos; + f.__name__ + &apos;()...&apos;</span><br><span class="line">        return f(x)</span><br><span class="line">    return fn</span><br></pre></td></tr></table></figure></p><p>对于只有一个参数的阶乘函数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line">def factorial(n):</span><br><span class="line">    return reduce(lambda x,y: x*y, range(1, n+1))</span><br><span class="line">print (factorial(10))</span><br><span class="line"></span><br><span class="line"># ==&gt; call factorial()...</span><br><span class="line"># ==&gt; 3628800</span><br></pre></td></tr></table></figure></p><p>但是，对于参数不止一个的函数，就会报错。<br>由于@log写死了返回函数只含一个参数。</p><p>要让 @log 自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def log(f):</span><br><span class="line">    def fn(*args, **kw):</span><br><span class="line">        print &apos;call &apos; + f.__name__ + &apos;()...&apos;</span><br><span class="line">        return f(*args, **kw)</span><br><span class="line">    return fn</span><br><span class="line"></span><br><span class="line"># 现在，对于任意函数，@log 都能正常工作了。</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">def performance(f):</span><br><span class="line">    def fn(*args, **kw):</span><br><span class="line">        print (&apos;call &apos; + f.__name__ + &apos;() in &apos; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;))</span><br><span class="line">        print(&apos;call &apos; + f.__name__ + &apos;() in &apos; + time.strftime(&apos;%Y&#123;y&#125;%m&#123;m&#125;%d&#123;d&#125; %H:%M:%S&apos;).format(y=&apos;年&apos;,m=&apos;月&apos;,d=&apos;日&apos;))</span><br><span class="line">        return f(*args, **kw)</span><br><span class="line">    return fn</span><br><span class="line"></span><br><span class="line">@performance</span><br><span class="line">def factorial(n):</span><br><span class="line">    return reduce(lambda x,y: x * y, range(1, n+1))</span><br><span class="line"></span><br><span class="line">print (factorial(10))</span><br></pre></td></tr></table></figure><blockquote><p>*注：<br><a href="https://www.runoob.com/python3/python3-date-time.html" target="_blank" rel="noopener">Python3 日期和时间 time与calendar</a></p></blockquote><p>*带参数decorator：<br>从上一小节的@log装饰器可以看出，打印的语句不能改变（除了函数名）。<br>若需要打印内容改变，log函数本身需要传入参数，类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@log(&apos;DEBUG&apos;)</span><br><span class="line">def my_func():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>翻译成高阶函数的调用：<br><code>my_func = log(&#39;DEBUG&#39;)(my_func)</code><br>展开一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_decorator = log(&apos;DEBUG&apos;)</span><br><span class="line">my_func = log_decorator(my_func)</span><br></pre></td></tr></table></figure></p><p>由此可见，带参数的log函数首先返回一个decorator函数，再让这个decorator函数接收my_func并返回新函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def log(s):</span><br><span class="line">def log_decorator(f):</span><br><span class="line">def fn(*args, **kw):</span><br><span class="line">#print (&apos;[&apos; + s + &apos;]&apos; + &apos;call &apos; + f.__name__ + &apos;()...&apos;)</span><br><span class="line">print (&apos;[%s]call %s()...&apos;%(s, f.__name__))</span><br><span class="line">return f(*args, **kw)</span><br><span class="line">return fn</span><br><span class="line">return log_decorator</span><br><span class="line"></span><br><span class="line">@log(&apos;DEBUG&apos;)</span><br><span class="line">def test():</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">print (test())</span><br><span class="line"></span><br><span class="line"># ==&gt; [DEBUG]call test()...</span><br><span class="line"># ==&gt; None</span><br></pre></td></tr></table></figure></p><p>*完善decorator：<br>@decorator可以动态实现函数功能的增加，与原函数相比，还有一些其他改变的地方。<br>以打印函数名为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def log(f):</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print (&apos;call...&apos;)</span><br><span class="line">        return f(*args, **kw)</span><br><span class="line">    return wrapper</span><br><span class="line">@log</span><br><span class="line">def f2(x):</span><br><span class="line">    pass</span><br><span class="line">print (f2.__name__)  # ==&gt; wrapper</span><br></pre></td></tr></table></figure></p><p>可见，由于decorator返回的新函数函数名已经不是’f2’，而是@log内部定义的’wrapper’。这对于那些依赖函数名的代码就会失效。decorator还改变了函数的<strong>doc</strong>等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要把原函数的一些属性复制到新函数中。<br>如果一一赋值就会很繁琐，我们可以使用Python内置的functools可以用来自动化完成这个“复制”的任务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">def log(f):</span><br><span class="line">    @functools.wraps(f)</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print &apos;call...&apos;</span><br><span class="line">        return f(*args, **kw)</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure></p><h3 id="13、偏函数"><a href="#13、偏函数" class="headerlink" title="13、偏函数"></a>13、偏函数</h3><p>假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def int2(x, base=2):</span><br><span class="line">    return int(x, base)</span><br><span class="line"></span><br><span class="line">print (int2(&apos;1010101&apos;))  # ==&gt; 85</span><br></pre></td></tr></table></figure></p><p>functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">int2 = functools.partial(int, base=2)</span><br><span class="line">print (int2(&apos;1010101&apos;))  # ==&gt; 85</span><br></pre></td></tr></table></figure></p><p>所以，functools.partial可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。</p><hr><h2 id="第二章-模块"><a href="#第二章-模块" class="headerlink" title="第二章 模块"></a>第二章 模块</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p>代码越来越多时，</p><ul><li>将所有代码放入一个py文件：无法维护。</li><li>将代码拆分放入多个py文件：同一名字、不同py文件中的变量互不影响。</li></ul><p>模块的名字就是py文件的文件名。<br>*引用其他模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># test.py             # &lt;-- 自身模块名test</span><br><span class="line">import math           # &lt;-- 引用math模块</span><br><span class="line">print (math.sqrt(9))  # &lt;-- 调用math模块的函数</span><br></pre></td></tr></table></figure></p><ul><li>模块多了就容易重名，导致模块名冲突。</li><li>要解决模块名冲突，就将同名模块放入不同包中，<br>因为位于不同包中的同名模块，它们的完整模块名不同（加入了”包名.”前缀）。</li><li>在调用同名模块时，也需要写齐完整的模块名。</li></ul><p>在文件系统中，</p><ul><li>包就是文件夹，可以有多级</li><li>模块就是xxx.py文件<br>区分包与普通目录：包的每层都必须要有<strong>init</strong>.py这个文件!</li></ul><h3 id="2、导入模块"><a href="#2、导入模块" class="headerlink" title="2、导入模块"></a>2、导入模块</h3><p>要使用一个模块，必须首先导入它。Python使用import语句导入一个模块。<br>我们就可以认为math就是一个指向已导入模块的变量，通过该变量，我们可以访问math模块中所定义的所有公开的函数、变量、类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">print (math.pi)</span><br></pre></td></tr></table></figure></p><p>还可以使用from … import语句，导入模块中的某几个函数。<br>这样就可以直接引用函数，而不需通过模块名来调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from math import pi, sin, sqrt, log, e</span><br><span class="line"></span><br><span class="line">print (sin(pi/6), sqrt(9), log(e), e)</span><br></pre></td></tr></table></figure></p><p>若遇到名字冲突，（如math和logging模块中都有log函数）<br>（1）使用import导入:<br>由于必须通过模块名来调用函数，因此不存在冲突；<br>（2）使用from … import导入:<br>必然引起冲突。这时可以通过 as 给函数起个“别名”来避免冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from math import log</span><br><span class="line">from logging import log as logger</span><br><span class="line"># 现在，logging的log就有了个logger别名</span><br><span class="line"></span><br><span class="line">print (log(10))</span><br><span class="line">logger(10, &apos;import from logging&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="3、动态导入模块"><a href="#3、动态导入模块" class="headerlink" title="3、动态导入模块"></a>3、动态导入模块</h3><p>当导入模块不存在时，Python解释器会报ImportError错误。<br>有的时候，两个不同的模块提供了相同的功能，比如 StringIO 和 cStringIO 都提供了StringIO这个功能。</p><p>这是因为Python是动态语言，解释执行，因此Python代码运行速度慢。<br>如果要提高Python代码的运行速度，最简单的方法是把某些关键函数用 C 语言重写，这样就能大大提高执行速度。</p><p>同样的功能，StringIO 是纯Python代码编写的，而 cStringIO 部分函数是 C 写的，因此 cStringIO 运行速度更快。</p><p>利用ImportError错误，我们经常在Python中动态导入模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 对于Python2，</span><br><span class="line">try:</span><br><span class="line">    from StringIO import StringIO</span><br><span class="line">except ImportError:</span><br><span class="line">    from StringIO import StringIO</span><br><span class="line"></span><br><span class="line"># 先尝试从cStringIO导入，如果失败了，再尝试从StringIO导入。</span><br><span class="line"># 这样，要么提高运行速度，要么运行速度变慢，但不会影响代码正常执行。</span><br><span class="line"></span><br><span class="line"># 对于Python3，</span><br><span class="line">from io import StringIO</span><br></pre></td></tr></table></figure></p><p>try 的作用是捕获错误，并在捕获到指定错误时执行 except 语句。</p><h3 id="4、使用-future"><a href="#4、使用-future" class="headerlink" title="4、使用__future__"></a>4、使用__future__</h3><p>要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。</p><h3 id="5、Python3安装第三方模块的三种方法"><a href="#5、Python3安装第三方模块的三种方法" class="headerlink" title="5、Python3安装第三方模块的三种方法"></a>5、<a href="https://blog.csdn.net/mdxiaohu/article/details/82431797" target="_blank" rel="noopener">Python3安装第三方模块的三种方法</a></h3><hr><h2 id="第三章-面向对象编程"><a href="#第三章-面向对象编程" class="headerlink" title="第三章 面向对象编程"></a>第三章 面向对象编程</h2><h3 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h3><ul><li>面向对象编程是一种程序设计范式</li><li>把程序看做不同对象的相互调用</li><li>对现实世界建立对象模型</li></ul><h3 id="2、基本思想"><a href="#2、基本思想" class="headerlink" title="2、基本思想"></a>2、基本思想</h3><p>类和实例：</p><ul><li><p>类用于定义抽象类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li><li><p>实例根据类的定义被创建出来<br><code>xiaoMing = Person()</code></p></li><li>面向对象编程：数据封装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">    self.name = name</span><br><span class="line">p = Person(&apos;aaa&apos;)</span><br><span class="line">print (p.name)  # ==&gt; aaa</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、定义类并创建实例"><a href="#3、定义类并创建实例" class="headerlink" title="3、定义类并创建实例"></a>3、定义类并创建实例</h3><p>在Python中，类通过 class 关键字定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>按照 Python 的编程习惯，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的。<br>有了Person类的定义，就可以创建出具体的实例。<br>创建实例使用 类名+()，类似函数调用的形式创建：<br><code>xiaoMing = Person()</code></p><h3 id="4、创建实例属性"><a href="#4、创建实例属性" class="headerlink" title="4、创建实例属性"></a>4、创建实例属性</h3><p>通过Person类创建出多个实例，但是这些实例看上去除了地址不同外，没有什么其他不同。<br>在现实世界中，区分多个实例要依靠他们各自的属性。如何让每个实例拥有各自不同的属性？<br>由于Python是动态语言，对每一个实例，都可以直接给他们的属性赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person()</span><br><span class="line">xiaoming.name = &apos;Xiao Ming&apos;</span><br><span class="line">xiaoming.gender = &apos;Male&apos;</span><br><span class="line">xiaoming.birth = &apos;1990-1-1&apos;</span><br></pre></td></tr></table></figure></p><p>给xiaohong加上的属性不一定要和xiaoming相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaohong = Person()</span><br><span class="line">xiaohong.name = &apos;Xiao Hong&apos;</span><br><span class="line">xiaohong.school = &apos;No. 1 High School&apos;</span><br><span class="line">xiaohong.grade = 2</span><br></pre></td></tr></table></figure></p><p>而且，实例的属性可以像普通变量一样进行操作：<br><code>xiaohong.grade = xiaohong.grade + 1</code></p><h3 id="5、初始化实例属性"><a href="#5、初始化实例属性" class="headerlink" title="5、初始化实例属性"></a>5、初始化实例属性</h3><p>虽然我们可以自由地给一个实例绑定各种属性，但是，现实世界中，我们创建出一个实例时，它就应该拥有一些属性。<br>因此，我们在定义类时，可以为该类添加一个特殊的__init__()方法，当用该类创建实例时，__init__()方法会被自动调用。这样，实例创建出来就会具有属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender, birth):</span><br><span class="line">    self.name = name</span><br><span class="line">self.gender = gender</span><br><span class="line">self.birth = birth</span><br></pre></td></tr></table></figure></p><p>__init__() 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法）。后续参数则可以自由指定，和定义函数没有任何区别。<br>相应地，创建实例时，就必须要提供除 self 以外的参数：<br><code>xiaoming = Person(&#39;Xiao Ming&#39;, &#39;Male&#39;, &#39;1991-1-1&#39;)</code><br>在访问属性时，可以使用 . 操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender, birth, **kw):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line">        self.__dict__.update(kw)  # 更新语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Person(&apos;Xiao Ming&apos;, &apos;Male&apos;, &apos;1990-1-1&apos;, job=&apos;Student&apos;, wx = 2010, qq=2222)</span><br><span class="line"></span><br><span class="line">print (xiaoming.wx)</span><br><span class="line">print (xiaoming.qq)</span><br></pre></td></tr></table></figure></p><h3 id="6、访问限制"><a href="#6、访问限制" class="headerlink" title="6、访问限制"></a>6、访问限制</h3><p>Python对属性权限的控制是通过属性名来实现的。</p><ul><li><p>如果一个属性由双下划线开头__，该属性就无法被外部访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        self._title = &apos;Mr&apos;</span><br><span class="line">        self.__job = &apos;Student&apos;</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;)</span><br><span class="line"></span><br><span class="line">print p.name</span><br><span class="line"># =&gt; Bob</span><br><span class="line"></span><br><span class="line">print p._title</span><br><span class="line"># =&gt; Mr</span><br><span class="line"></span><br><span class="line">print p.__job</span><br><span class="line"># =&gt; Error</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;B:\Users\Steven\LearnPython\new.py&quot;, line 24, in &lt;module&gt;</span><br><span class="line">    print (p.__job)</span><br><span class="line">AttributeError: &apos;Person&apos; object has no attribute &apos;__job&apos;</span><br></pre></td></tr></table></figure></li><li><p>可见，只有以双下划线开头的”__job”不能直接被外部访问。</p></li><li>如果一个属性以”__xxx__”的形式定义，那它又可以被外部访问了。<br>以”__xxx__”定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常我们不要把普通属性用”__xxx__”定义。</li><li>以单下划线开头的属性”_xxx”虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;, 59)</span><br><span class="line"></span><br><span class="line">print (p.name)</span><br><span class="line">try:</span><br><span class="line">    print (p.__score)</span><br><span class="line">except AttributeError:</span><br><span class="line">    print (&apos;AttributeError&apos;)</span><br></pre></td></tr></table></figure><p>详解可见，<a href="https://www.cnblogs.com/xiaojianliu/articles/10027675.html" target="_blank" rel="noopener">python3 面向对象：访问限制 </a></p><h3 id="7、创建类属性"><a href="#7、创建类属性" class="headerlink" title="7、创建类属性"></a>7、创建类属性</h3><p>类是模板，而实例则是根据类创建的对象。<br>绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！<br><strong>也就是说，实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    address = &apos;Earth&apos;</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure></p><p>因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print (Person.address)</span><br><span class="line"># =&gt; Earth</span><br></pre></td></tr></table></figure></p><p>对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line">p2 = Person(&apos;Alice&apos;)</span><br><span class="line">print (p1.address)</span><br><span class="line"># =&gt; Earth</span><br><span class="line">print (p2.address)</span><br><span class="line"># =&gt; Earth</span><br></pre></td></tr></table></figure></p><p>由于Python是动态语言，类属性也是可以动态添加和修改的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.address = &apos;China&apos;</span><br><span class="line">print (p1.address)</span><br><span class="line"># =&gt; &apos;China&apos;</span><br><span class="line">print (p2.address)</span><br><span class="line"># =&gt; &apos;China&apos;</span><br></pre></td></tr></table></figure></p><p>因为类属性只有一份，所以，当Person类的address改变时，所有实例访问到的类属性都改变了。</p><h3 id="8、类属性和实例属性名字冲突怎么办"><a href="#8、类属性和实例属性名字冲突怎么办" class="headerlink" title="8、类属性和实例属性名字冲突怎么办"></a>8、类属性和实例属性名字冲突怎么办</h3><p>修改类属性会导致所有实例访问到的类属性全部都受影响。<br>但是，如果在实例变量上修改类属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    address = &apos;Earth&apos;</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line">p2 = Person(&apos;Alice&apos;)</span><br><span class="line"></span><br><span class="line">print (&apos;Person.address = &apos; + Person.address)</span><br><span class="line"># ==&gt; Person.address = Earth</span><br><span class="line"></span><br><span class="line">p1.address = &apos;China&apos;</span><br><span class="line">print (&apos;p1.address = &apos; + p1.address)</span><br><span class="line"># ==&gt; p1.address = China</span><br><span class="line"></span><br><span class="line">print (&apos;Person.address = &apos; + Person.address)</span><br><span class="line"># ==&gt; Person.address = Earth</span><br><span class="line"></span><br><span class="line">print (&apos;p2.address = &apos; + p2.address)</span><br><span class="line"># ==&gt; p2.address = Earth</span><br></pre></td></tr></table></figure></p><p>由此可见，在设置了 p1.address = ‘China’ 后，p1访问 address 确实变成了 ‘China’，但是，Person.address和p2.address仍然是’Earth’。<br>原因是 p1.address = ‘China’并没有改变 Person 的 address，而是给 p1这个实例绑定了实例属性address 。<br>对p1来说，它有一个实例属性address（值是’China’），而它所属的类Person也有一个类属性address，所以：</p><ul><li>访问 p1.address 时，优先查找实例属性，返回’China’。</li><li>访问 p2.address 时，p2没有实例属性address，但是有类属性address，因此返回’Earth’。</li></ul><p><strong>可见，当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。</strong><br><strong>可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line"></span><br><span class="line">    __count = 0</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        Person.__count += 1</span><br><span class="line">        print (Person.__count)</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line"># ==&gt; 1</span><br><span class="line">p2 = Person(&apos;Alice&apos;)</span><br><span class="line"># ==&gt; 2</span><br><span class="line">try:</span><br><span class="line">    print (Person.__count)</span><br><span class="line">except AttributeError:</span><br><span class="line">    print (&apos;AttributeError&apos;)</span><br><span class="line"># ==&gt; AttributeError</span><br></pre></td></tr></table></figure></p><h3 id="9、定义实例方法"><a href="#9、定义实例方法" class="headerlink" title="9、定义实例方法"></a>9、定义实例方法</h3><p>一个实例的私有属性就是以__开头的属性，无法被外部访问，那这些属性定义有什么用？<br>虽然私有属性无法从外部访问，但是，从类的内部是可以访问的。除了可以定义实例的属性外，还可以定义实例的方法。<br>实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self.__name</span><br></pre></td></tr></table></figure></p><p>get_name(self) 就是一个实例方法，它的第一个参数是self。__init__(self, name)其实也可看做是一个特殊的实例方法。<br>调用实例方法必须在实例上调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line">print (p1.get_name())  # self不需要显式传入</span><br><span class="line"># =&gt; Bob</span><br></pre></td></tr></table></figure></p><p>在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得。<br>这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        if self.__score &gt;= 90:</span><br><span class="line">            return &apos;A&apos;</span><br><span class="line">        elif self.__score &gt;= 60:</span><br><span class="line">            return &apos;B&apos;</span><br><span class="line">        else:</span><br><span class="line">            return &apos;C&apos;</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;Bob&apos;, 90)</span><br><span class="line">p2 = Person(&apos;Alice&apos;, 65)</span><br><span class="line">p3 = Person(&apos;Tim&apos;, 48)</span><br><span class="line"></span><br><span class="line">print (p1.get_grade())  # ==&gt; A</span><br><span class="line">print (p2.get_grade())  # ==&gt; B</span><br><span class="line">print (p3.get_grade())  # ==&gt; C</span><br></pre></td></tr></table></figure></p><h3 id="10、方法也是属性"><a href="#10、方法也是属性" class="headerlink" title="10、方法也是属性"></a>10、方法也是属性</h3><p>因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法（不常见）。</p><h3 id="11、定义类方法"><a href="#11、定义类方法" class="headerlink" title="11、定义类方法"></a>11、定义类方法</h3><p>和属性类似，方法也分实例方法和类方法。<br>在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。<br>要在class中定义类方法，需要这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    count = 0</span><br><span class="line">    @classmethod</span><br><span class="line">    def how_many(cls):</span><br><span class="line">        return cls.count</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        Person.count = Person.count + 1</span><br><span class="line"></span><br><span class="line">print (Person.how_many())</span><br><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line">print (Person.how_many())</span><br></pre></td></tr></table></figure></p><p>通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls，上面的 cls.count 实际上相当于 Person.count。<br>因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    __count = 0</span><br><span class="line">    @classmethod</span><br><span class="line">    def how_many(cls):</span><br><span class="line">        return cls.__count</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        Person.__count += 1</span><br><span class="line">    </span><br><span class="line">print (Person.how_many())</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;Bob&apos;)</span><br><span class="line">print (Person.how_many())</span><br></pre></td></tr></table></figure></p><hr><h2 id="第四章-类的继承"><a href="#第四章-类的继承" class="headerlink" title="第四章 类的继承"></a>第四章 类的继承</h2><h3 id="1、继承一个类"><a href="#1、继承一个类" class="headerlink" title="1、继承一个类"></a>1、继承一个类</h3><p>如果已经定义了Person类，需要定义新的Teacher类时，可以直接从Person类继承；<br><strong>总是从某个类继承，若没有合适的类，就从object类继承。</strong><br>定义Teacher类时，只需要把额外的属性加上，例如course；<br>并且，<strong>一定要用 super(Teacher, self).__init__(name, gender) 去初始化父类</strong>，否则，继承自 Person 的 Teacher 将没有 name 和 gender。</p><p>函数super(Teacher, self)将返回当前类继承的父类，即 Person ，然后调用__init__()方法，<strong>注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">class Teacher(Person):</span><br><span class="line">    def __init__(self, name, gender, course):</span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">t = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)</span><br><span class="line">print (t.name)</span><br><span class="line">print (t.course)</span><br></pre></td></tr></table></figure></p><h3 id="2、判断类型"><a href="#2、判断类型" class="headerlink" title="2、判断类型"></a>2、判断类型</h3><p>函数isinstance()可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    def __init__(self, name, gender, score):</span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">class Teacher(Person):</span><br><span class="line">    def __init__(self, name, gender, course):</span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">t = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)</span><br><span class="line"></span><br><span class="line">print (isinstance(t, Person))   # ==&gt; True</span><br><span class="line">print (isinstance(t, Student))  # ==&gt; False</span><br><span class="line">print (isinstance(t, Teacher))  # ==&gt; True</span><br><span class="line">print (isinstance(t, object))   # ==&gt; True</span><br></pre></td></tr></table></figure></p><p><strong>由此说明，在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。</strong><br><strong>但是，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。</strong></p><h3 id="3、多态"><a href="#3、多态" class="headerlink" title="3、多态"></a>3、多态</h3><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Person 派生出 Student和Teacher ，并都写了一个 whoAmI() 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    def whoAmI(self):</span><br><span class="line">        return &apos;I am a Person, my name is %s&apos; % self.name</span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    def __init__(self, name, gender, score):</span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line">    def whoAmI(self):</span><br><span class="line">        return &apos;I am a Student, my name is %s&apos; % self.name</span><br><span class="line"></span><br><span class="line">class Teacher(Person):</span><br><span class="line">    def __init__(self, name, gender, course):</span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line">    def whoAmI(self):</span><br><span class="line">        return &apos;I am a Teacher, my name is %s&apos; % self.name</span><br><span class="line"></span><br><span class="line">def who_am_i(x):</span><br><span class="line">    print (x.whoAmI())</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Tim&apos;, &apos;Male&apos;)</span><br><span class="line">s = Student(&apos;Bob&apos;, &apos;Male&apos;, 88)</span><br><span class="line">t = Teacher(&apos;Alice&apos;, &apos;Female&apos;, &apos;English&apos;)</span><br><span class="line"></span><br><span class="line">who_am_i(p)  # ==&gt; I am a Person, my name is Tim</span><br><span class="line">who_am_i(s)  # ==&gt; I am a Student, my name is Bob</span><br><span class="line">who_am_i(t)  # ==&gt; I am a Teacher, my name is Alice</span><br></pre></td></tr></table></figure></p><p>这种行为称为多态。也就是说，方法调用将作用在 x 的实际类型上。<br>s 是Student类型，它实际上拥有自己的 whoAmI()方法以及从 Person继承的 whoAmI方法，但调用 s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。</p><p>由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。<br>任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Book(object):</span><br><span class="line">    def whoAmI(self):</span><br><span class="line">        return &apos;I am a book&apos;</span><br></pre></td></tr></table></figure></p><p>这就是动态语言和静态语言（例如Java）最大的差别之一。</p><ul><li>动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</li></ul><h3 id="4、多重继承"><a href="#4、多重继承" class="headerlink" title="4、多重继承"></a>4、多重继承</h3><p>Python允许从多个父类继承，称为多重继承。</p><p>多重继承的目的是<strong>从两种继承树中分别选择并继承出子类，以便组合功能使用</strong>。</p><h3 id="5、获取对象信息"><a href="#5、获取对象信息" class="headerlink" title="5、获取对象信息"></a>5、获取对象信息</h3><p>拿到一个变量，除了用 isinstance() 判断它是否是某种类型的实例外，还有一些别的方法获取到更多的信息。</p><ul><li><p>首先可以用 type() 函数获取变量的类型，它返回一个 Type 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print (type(123))  # ==&gt; &lt;class &apos;int&apos;&gt;</span><br><span class="line">s = Student(&apos;Bob&apos;, &apos;Male&apos;, 88)  # Student类之前已定义，此处省略了。</span><br><span class="line">print (type(s))    # ==&gt; &lt;class &apos;__main__.Student&apos;&gt;</span><br></pre></td></tr></table></figure></li><li><p>其次，可以用 dir() 函数获取变量的所有属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print (type(123))</span><br><span class="line">print (type(s))</span><br></pre></td></tr></table></figure></li></ul><p>对于实例变量，dir()返回所有实例属性，包括<code>__class__</code>这类有特殊意义的属性。注意到方法<code>whoAmI</code>也是 s 的一个属性。<br>dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 getattr() 和 setattr( )函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print (getattr(s, &apos;name&apos;))     # ==&gt; Bob</span><br><span class="line"></span><br><span class="line">setattr(s, &apos;name&apos;, &apos;Adam&apos;)</span><br><span class="line">print (getattr(s, &apos;name&apos;))     # ==&gt; Adam</span><br><span class="line"></span><br><span class="line">print (getattr(s, &apos;age&apos;, 20))  # ==&gt; 20</span><br><span class="line"># 获取age属性，如果属性不存在，就返回默认值20</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender, **kw):</span><br><span class="line">        self.__dict__.update(kw)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;, &apos;Male&apos;, age=18, course=&apos;Python&apos;)</span><br><span class="line">print (p.age)     # ==&gt; 18</span><br><span class="line">print (p.course)  # ==&gt; Python</span><br></pre></td></tr></table></figure><hr><h2 id="第五章-定制类"><a href="#第五章-定制类" class="headerlink" title="第五章 定制类"></a>第五章 定制类</h2><h3 id="1、特殊方法"><a href="#1、特殊方法" class="headerlink" title="1、特殊方法"></a>1、特殊方法</h3><p>先举个例子，比较print的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print (lst)</span><br><span class="line"># ==&gt; [1, 2, 3]</span><br><span class="line"></span><br><span class="line">print (s)</span><br><span class="line"># ==&gt; &lt;__main__.Student object at 0x000001DD12010128&gt;</span><br></pre></td></tr></table></figure></p><p>Python是如何把任一变量变成str？<br>任何数据类型的实例都有一个特殊方法<strong>__str__()</strong>,打印就是调用了这个方法。<br>我们可以在一个类里面加入该特殊方法，按自己的想法进行打印。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;(Person:%s,%s)&apos;%(self.name,self.gender)</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;, &apos;Male&apos;)</span><br><span class="line">print (p)  # ==&gt; (Person:Bob,Male)</span><br></pre></td></tr></table></figure></p><p>定义：</p><ul><li>定义在class当中</li><li>不需要直接调用</li><li>Python的某些函数或者是操作符会调用相应的特殊方法</li></ul><p>有哪些特殊方法？</p><ul><li>用于print的__str__</li><li>用于len的__len__</li><li>用于cmp（比较）的__cmp__<br>…</li></ul><p>如何正确实现特殊方法？</p><ul><li>只需要编写用到的特殊方法</li><li>有关联性的特殊方法都必须实现<br>比如：__getattr__  __setattr__  __delattr__</li></ul><p>具体可见，<a href="https://www.cnblogs.com/chang1203/p/5847490.html" target="_blank" rel="noopener">python之特殊方法</a></p><h3 id="2、-str-和-repr"><a href="#2、-str-和-repr" class="headerlink" title="2、__str__和__repr__"></a>2、__str__和__repr__</h3><p>如果要把一个类的实例变成 str，就需要实现特殊方法__str__()。<br>Python 定义了__str__()和__repr__()两种方法。</p><ul><li>__str__()用于显示给用户；</li><li>__repr__()用于显示给开发人员。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;(Person:%s,%s)&apos;%(self.name,self.gender)</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;, &apos;Male&apos;)</span><br><span class="line"></span><br><span class="line">print (p)             # ==&gt; (Person:Bob,Male)</span><br><span class="line">print (p.__str__())   # ==&gt; (Person:Bob,Male)</span><br><span class="line">print (p.__repr__())  # ==&gt; &lt;__main__.Person object at 0x000001D434E1B278&gt;</span><br></pre></td></tr></table></figure><p>有种偷懒定义__repr__的方法：<br><code>__repr__ = __str__</code></p><h3 id="3、-cmp-（Python2-3-有区别）"><a href="#3、-cmp-（Python2-3-有区别）" class="headerlink" title="3、__cmp__（Python2, 3 有区别）"></a>3、__cmp__（Python2, 3 有区别）</h3><p>*Python2:<br>对 int、str 等内置数据类型排序时，Python的 sorted() 按照默认的比较函数 cmp 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()。<br>__cmp__用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。<br>而在Python3中有所不同。</p><p>*Python3：<br>在Python3中已没有cmp()函数，如果你需要实现比较功能，需要引入 operator 模块，适合任何对象，包含的方法有：</p><ul><li>lt(a, b) 相当于 a &lt; b –&gt; 从第一个数字或字母（ASCII）比大小</li><li>le(a, b) 相当于 a &lt;= b</li><li>eq(a, b) 相当于 a == b –&gt; 字母完全一样，返回True</li><li>ne(a, b) 相当于 a != b</li><li>gt(a, b) 相当于 a &gt; b</li><li>ge(a, b) 相当于 a &gt;= b<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import operator</span><br><span class="line">dict1 = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;</span><br><span class="line">dict2 = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;</span><br><span class="line">dict3 = &#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;</span><br><span class="line">print(operator.eq(dict1, dict2))  # ==&gt; True</span><br><span class="line">print(operator.eq(dict1, dict3))  # ==&gt; False</span><br></pre></td></tr></table></figure></li></ul><p>函数的返回值是布尔。<br>（以上Python3部分转自：<a href="https://www.jianshu.com/p/37b5dbf486a0" target="_blank" rel="noopener">随记Python3中比较函数operator</a>）</p><p>特殊函数与以上相类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;(Student: %s, %s)&apos;%(self.name, self.score)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line">    </span><br><span class="line">    def __lt__(self,s):</span><br><span class="line">        return self.name &lt; s.name</span><br><span class="line">    def __gt__(self,s):</span><br><span class="line">        return self.name &gt; s.name</span><br><span class="line">    def __eq__(self,s):</span><br><span class="line">        return self.name == s.name</span><br><span class="line"></span><br><span class="line">L = [Student(&apos;Tim&apos;, 99), Student(&apos;Bob&apos;, 88), Student(&apos;Alice&apos;, 77)]</span><br><span class="line">print (sorted(L))</span><br><span class="line"># ==&gt; [(Student: Alice, 77), (Student: Bob, 88), (Student: Tim, 99)]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 按照分数从高到底排序，分数相同的按名字排序。</span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;(%s: %s)&apos; % (self.name, self.score)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"># Python2</span><br><span class="line">    # def __cmp__(self, s):</span><br><span class="line">    #     if self.score &gt; s.score:</span><br><span class="line">    #         return -1</span><br><span class="line">    #     elif self.score &lt; s.score:</span><br><span class="line">    #         return 1</span><br><span class="line">    #     else:</span><br><span class="line">    #         if self.name &gt; s.name:</span><br><span class="line">    #             return 1</span><br><span class="line">    #         elif self.name &lt; s.name:</span><br><span class="line">    #             return -1</span><br><span class="line">    #         else:</span><br><span class="line">    #             return 0</span><br><span class="line">    </span><br><span class="line"># Python3</span><br><span class="line">def __lt__(self, s):</span><br><span class="line">        if self.score == s.score:</span><br><span class="line">            return self.name &lt; s.name</span><br><span class="line">        return self.score &gt; s.score</span><br><span class="line">    </span><br><span class="line">L = [Student(&apos;Tim&apos;, 99), Student(&apos;Bob&apos;, 88), Student(&apos;Alice&apos;, 99)]</span><br><span class="line">print (sorted(L))  # ==&gt; [(Alice: 99), (Tim: 99), (Bob: 88)]</span><br></pre></td></tr></table></figure><blockquote><p>*注：<br>自己总结出来的规律，以属性 xxx 排序为例： </p><ul><li><strong>升序排列, 符号相同</strong>：<br>__lt__(self, s) 【 &lt; 】 函数内就应该 return self.xxx &lt; s.xxx<br>__gt__(self, s) 【 &gt; 】 函数内就应该 return self.xxx &gt; s.xxx</li><li><strong>降序排列, 符号相反</strong>：<br>__lt__(self, s) 【 &lt; 】 函数内就应该 return self.xxx &gt; s.xxx<br>__gt__(self, s) 【 &gt; 】 函数内就应该 return self.xxx &lt; s.xxx</li></ul></blockquote><h3 id="4、-len"><a href="#4、-len" class="headerlink" title="4、__len__"></a>4、__len__</h3><p>如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。<br>要让 len() 函数工作正常，类必须提供一个特殊方法__len__()，它返回元素的个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Students(object):</span><br><span class="line">    def __init__(self, *args):</span><br><span class="line">        self.names = args</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.names)</span><br><span class="line"></span><br><span class="line">ss = Students(&apos;Bob&apos;, &apos;Alice&apos;, &apos;Tim&apos;)</span><br><span class="line">print (len(ss))  # ==&gt; 3</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 斐波那契数列</span><br><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self, num):</span><br><span class="line">        self.lst = [0, 1]</span><br><span class="line">        count = 2</span><br><span class="line">        while(count &lt; num):</span><br><span class="line">            numb = self.lst[count-1] + self.lst[count-2]</span><br><span class="line">            self.lst.append(numb)</span><br><span class="line">            count = count + 1</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.lst)</span><br><span class="line">        </span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.lst)</span><br><span class="line"></span><br><span class="line">f = Fib(10)</span><br><span class="line"></span><br><span class="line">print (f)       # ==&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br><span class="line">print (len(f))  # ==&gt; 10</span><br></pre></td></tr></table></figure><h3 id="5、数学运算"><a href="#5、数学运算" class="headerlink" title="5、数学运算"></a>5、数学运算</h3><p>Python 提供的基本数据类型 int、float 可以做整数和浮点的四则运算以及乘方等运算。<br>但是，四则运算不局限于int和float，还可以是有理数、矩阵等。<br>要表示有理数，可以用一个Rational类来表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Rational(object):</span><br><span class="line">    def __init__(self, p, q):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br></pre></td></tr></table></figure></p><p>p、q 都是整数，表示有理数 p/q。<br>如果要让Rational进行+运算，需要正确实现__add__：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Rational(object):</span><br><span class="line">    def __init__(self, p, q):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">    def __add__(self, r):</span><br><span class="line">        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;%s/%s&apos; % (self.p, self.q)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">r1 = Rational(1, 3)</span><br><span class="line">r2 = Rational(1, 2)</span><br><span class="line">print (r1 + r2)  # ==&gt; 5/6</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 完善Rational类，实现四则运算。</span><br><span class="line">class Rational(object):</span><br><span class="line">    def __init__(self, p, q):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">    def __add__(self, r):</span><br><span class="line">        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line">    def __sub__(self, r):</span><br><span class="line">        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line">    def __mul__(self, r):</span><br><span class="line">        return Rational(self.p * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line"># Python3中除法的方法是__truediv__()不是__div__()</span><br><span class="line">    def __truediv__(self, r):  </span><br><span class="line">        return Rational(self.p * r.q, self.q * r.p)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line"># 约分</span><br><span class="line">        if self.p &lt; self.q:</span><br><span class="line">            k = self.p</span><br><span class="line">        k = self.q</span><br><span class="line">        for x in range(k, 0, -1):</span><br><span class="line">            if self.p % x == 0 and self.q % x == 0:</span><br><span class="line">                self.p = self.p / x</span><br><span class="line">                self.q = self.q / x</span><br><span class="line">        if self.q == 1:</span><br><span class="line">            return &apos;%d&apos;%self.p</span><br><span class="line">        return &apos;%d/%d&apos;%(self.p, self.q)</span><br><span class="line">      </span><br><span class="line">    __repr__ = __str__</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">r1 = Rational(1, 2)</span><br><span class="line">r2 = Rational(1, 4)</span><br><span class="line">print (r1 + r2)  # ==&gt; 3/4</span><br><span class="line">print (r1 - r2)  # ==&gt; 1/4</span><br><span class="line">print (r1 * r2)  # ==&gt; 1/8</span><br><span class="line">print (r1 / r2)  # ==&gt; 2</span><br></pre></td></tr></table></figure><h3 id="6、类型转换"><a href="#6、类型转换" class="headerlink" title="6、类型转换"></a>6、类型转换</h3><p>Rational类实现了有理数运算，但是，如果要把结果转为 int 或 float 怎么办？<br>考察整数和浮点数的转换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print (int(12.34))  # ==&gt; 12</span><br><span class="line">print (float(12))   # ==&gt; 12.0</span><br></pre></td></tr></table></figure></p><p>如果要把 Rational 转为 int，应该使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = Rational(12, 5)</span><br><span class="line">n = int(r)</span><br></pre></td></tr></table></figure></p><p>要让int()函数正常工作，只需要实现特殊方法__int__();<br>同理，要让float()函数正常工作，只需要实现特殊方法__float__()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Rational(object):</span><br><span class="line">    def __init__(self, p, q):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">    def __int__(self):</span><br><span class="line">        return self.p // self.q</span><br><span class="line"></span><br><span class="line">    def __float__(self):</span><br><span class="line">        return self.p / self.q</span><br><span class="line"></span><br><span class="line">print (int(Rational(7, 2)))    # ==&gt; 3</span><br><span class="line">print (float(Rational(1, 3)))  # ==&gt; 0.3333333333333333</span><br></pre></td></tr></table></figure></p><h3 id="7、-property"><a href="#7、-property" class="headerlink" title="7、@property"></a>7、@property</h3><p>考察 Student 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure></p><p>要是想修改score属性，可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student(&apos;Bob&apos;, 60)</span><br><span class="line">s.score = 1000</span><br></pre></td></tr></table></figure></p><p>显然，这样无法检查赋值的有效性。<br>我们就可以这样改进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">def get_score(self):</span><br><span class="line">    return self.__score</span><br><span class="line">def set_score(self, score):</span><br><span class="line">        if (score &lt; 0 or score &gt;100):</span><br><span class="line">    raise ValueError(&apos;invalid score&apos;)</span><br><span class="line">self.__score = score</span><br><span class="line"></span><br><span class="line">s = Student(&apos;Bob&apos;, 60)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s.set_score(1000)</span><br><span class="line">except ValueError as v:</span><br><span class="line">    print (v)  # ==&gt; invalid score</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br><a href="https://blog.csdn.net/qq_43471020/article/details/84637557" target="_blank" rel="noopener">Python3异常处理, raise异常，自定义异常类</a></p></blockquote><p>这种使用 get/set 方法来封装对一个属性的访问在许多面向对象编程的语言中都很常见。<br>但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。<br>有种两全其美的方法：<br>因为Python支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 get/set 方法“装饰”成属性调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self.__score</span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, score):</span><br><span class="line">        if score &lt; 0 or score &gt; 100:</span><br><span class="line">            raise ValueError(&apos;invalid score&apos;)</span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：</p><ul><li>第一个score(self)是get方法，用@property装饰；</li><li>第二个score(self, score)是set方法，用@score.setter装饰，@score.setter是前一个@property装饰后的副产品。</li></ul></blockquote><p>现在，就可以像使用属性一样设置score了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = Student(&apos;Bob&apos;, 59)</span><br><span class="line">s.score = 60</span><br><span class="line">print (s.score)  # ==&gt; 60</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s.set_score(1000)</span><br><span class="line">except ValueError as v:</span><br><span class="line">    print (v)    # ==&gt; invalid score</span><br></pre></td></tr></table></figure></p><p>说明对 score 赋值实际调用的是 set方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    </span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self.__score</span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, score):</span><br><span class="line">        if score &lt; 0 or score &gt; 100:</span><br><span class="line">            raise ValueError(&apos;invalid score&apos;)</span><br><span class="line">        self.__score = score   </span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def grade(self):</span><br><span class="line">        if self.__score &gt;= 80:</span><br><span class="line">            return &apos;A&apos;</span><br><span class="line">        elif self.__score &gt;= 60:</span><br><span class="line">            return &apos;B&apos;</span><br><span class="line">        else:</span><br><span class="line">            return &apos;C&apos;</span><br><span class="line"></span><br><span class="line">s = Student(&apos;Bob&apos;, 59)</span><br><span class="line">print (s.grade)  # ==&gt; C</span><br><span class="line"></span><br><span class="line">s.score = 60</span><br><span class="line">print (s.grade)  # ==&gt; B</span><br><span class="line"></span><br><span class="line">s.score = 99</span><br><span class="line">print (s.grade)  # ==&gt; A</span><br></pre></td></tr></table></figure></p><h3 id="8、-slots"><a href="#8、-slots" class="headerlink" title="8、__slots__"></a>8、__slots__</h3><p>由于Python是动态语言，任何实例在运行期都可以动态地添加属性。<br>如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的__slots__来实现。<br>顾名思义，__slots__是指一个类允许的属性列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;gender&apos;, &apos;score&apos;)</span><br><span class="line">    def __init__(self, name, gender, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure></p><p>若添加不允许的属性，就会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = Student(&apos;Bob&apos;, &apos;male&apos;, 59)</span><br><span class="line">s.grade = &apos;A&apos;</span><br><span class="line"></span><br><span class="line"># ==&gt; </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: &apos;Student&apos; object has no attribute &apos;grade&apos;</span><br></pre></td></tr></table></figure></p><p>__slots__的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用__slots__也能节省内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;gender&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    __slots__ = (&apos;score&apos;)  # 继承类中只需要写出增加的允许属性。</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, gender, score):</span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score      </span><br><span class="line"></span><br><span class="line">s = Student(&apos;Bob&apos;, &apos;male&apos;, 59)</span><br><span class="line">s.name = &apos;Tim&apos;</span><br><span class="line">s.score = 99</span><br><span class="line">print (s.score)  # ==&gt; 99</span><br></pre></td></tr></table></figure></p><h3 id="9、-call"><a href="#9、-call" class="headerlink" title="9、__call__"></a>9、__call__</h3><p>在Python中，函数其实是一个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">print (f.__name__)  # ==&gt; abs</span><br></pre></td></tr></table></figure></p><p>由于 f 可以被调用，所以，f 被称为可调用对象。</p><ul><li>所有的函数都是可调用对象。</li><li>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    def __call__(self, friend):</span><br><span class="line">        print (&apos;My name is %s...&apos; % self.name)</span><br><span class="line">        print (&apos;My friend is %s...&apos; % friend)</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Bob&apos;, &apos;male&apos;)</span><br><span class="line">p(&apos;Tim&apos;)</span><br><span class="line"></span><br><span class="line"># ==&gt; My name is Bob...</span><br><span class="line"># ==&gt; My friend is Tim...</span><br></pre></td></tr></table></figure></li></ul><p>单看 p(‘Tim’) ,无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是对象，对象和函数的区别并不显著。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 斐波那契数列</span><br><span class="line">class Fib(object):</span><br><span class="line">    def __call__(self, x):</span><br><span class="line">        l = [0, 1]</span><br><span class="line">        count = 2</span><br><span class="line">        while(count &lt; x):</span><br><span class="line">            numb = l[count-1] + l[count-2]</span><br><span class="line">            l.append(numb)</span><br><span class="line">            count = count + 1</span><br><span class="line">        return l</span><br><span class="line"></span><br><span class="line">f = Fib()</span><br><span class="line">print (f(10))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-函数式编程&quot;&gt;&lt;a href=&quot;#第一章-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;第一章 函数式编程&quot;&gt;&lt;/a&gt;第一章 函数式编程&lt;/h2&gt;&lt;h3 id=&quot;1、概念&quot;&gt;&lt;a href=&quot;#1、概念&quot; class=&quot;headerlink&quot; title=&quot;1、概念&quot;&gt;&lt;/a&gt;1、概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数：function（基础学过）&lt;/li&gt;
&lt;li&gt;函数式：functional（一种编程范式）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数式编程是一种抽象计算的编程模式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Learning" scheme="http://yoursite.com/tags/Learning/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（基础）</title>
    <link href="http://yoursite.com/2019/04/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/23/Python学习笔记（基础）/</id>
    <published>2019-04-23T11:22:24.000Z</published>
    <updated>2019-05-26T08:57:33.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-基本功"><a href="#第一章-基本功" class="headerlink" title="第一章 基本功"></a>第一章 基本功</h2><h3 id="1、变量名命名规则"><a href="#1、变量名命名规则" class="headerlink" title="1、变量名命名规则"></a>1、变量名命名规则</h3><p>在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头</p><h3 id="2、print语句"><a href="#2、print语句" class="headerlink" title="2、print语句"></a>2、print语句</h3><p>print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。<br>print会依次打印每个字符串，遇到逗号“,”会输出一个空格。<br><code>print &#39;100 + 200 =&#39;, 100 + 200  # ==&gt; 100 + 200 = 300</code><br><a id="more"></a></p><h3 id="3、raw字符串"><a href="#3、raw字符串" class="headerlink" title="3、raw字符串"></a>3、raw字符串</h3><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。<br>为了避免这种情况，我们可以在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：<br><code>r&#39;\ (~_~)/ \ (~_~)/&#39;</code></p><h3 id="4、多行字符串"><a href="#4、多行字符串" class="headerlink" title="4、多行字符串"></a>4、多行字符串</h3><p>如果要表示多行字符串，可以用’’’…’’’表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p><p>与<br><code>&#39;Line 1\nLine 2\nLine 3&#39;</code><br>显示结果完全一样</p><h3 id="5、Unicode字符串"><a href="#5、Unicode字符串" class="headerlink" title="5、Unicode字符串"></a>5、Unicode字符串</h3><p>如果要正常输出中文，需要在字符串前面加一个前缀 u ，例如：print u‘中文’<br>并且需要在第一行添加注释:<br><code># -*- coding: utf-8 -*-</code></p><blockquote><p>*注：<br>     （1）Python对缩进要求严格，输入代码前面不能空格；<br>     （2）Python是一种动态语言，赋值无需定义变量类型；<br>     （3）以上三种字符串可以混合使用；<br>     （4）用‘#’符号注释语句；<br>     在Python3中，字符串统一为unicode，不需要加前缀 u，而以字节存储的str则必须加前缀 b。</p></blockquote><h3 id="6、布尔"><a href="#6、布尔" class="headerlink" title="6、布尔"></a>6、布尔</h3><p>Python把0、空字符串’’和None看成 False，其他数值和非空字符串都看成 True。<br>and 和 or 运算的一条重要法则：短路计算。<br>（1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。<br>（2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &apos;hello,&apos;,&apos;Python&apos; or &apos;world&apos;   # ==&gt; hello, python</span><br><span class="line">print &apos;hello,&apos;,&apos;&apos; and &apos;world&apos;        # ==&gt; hello,</span><br></pre></td></tr></table></figure></p><h3 id="7、list（列表）"><a href="#7、list（列表）" class="headerlink" title="7、list（列表）"></a>7、list（列表）</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>*构造list：<br>直接用 [ ] 把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Michael&apos;, 100, True]     # 由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，完全可以在list中包含各种类型数据。</span><br><span class="line">empty_l = []                   # 一个元素也没有的list，就是空list</span><br><span class="line">print L                        # ==&gt; [&apos;Michael&apos;, 100, True]</span><br></pre></td></tr></table></figure></p><p>*索引访问list：<br>索引从0开始。使用索引时，千万注意不要越界！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">print L[0]    # ==&gt; Adam</span><br><span class="line">print L[3]    # ==&gt; 越界</span><br><span class="line">print L[-1]   # ==&gt; Bart (倒序访问，‘-1’表示倒数第一个)</span><br></pre></td></tr></table></figure></p><p>*添加新元素：<br>append()方法  一个参数，待添加元素内容。总是将新元素添加到list末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.append(&apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>insert()方法  两个参数，第一个是需添加位置索引号，第二个是待添加元素内容。新元素插入此索引标识位置，原来此位置以及后面元素都自动向后移动一位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L.insert(0, &apos;Paul&apos;)</span><br><span class="line">print L       # ==&gt; [&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure></p><p>*从list删除元素：<br>pop()方法<br>不加参数，总是删除list的最后一个元素，并返回这个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">print L.pop() # ==&gt; Bart</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>一个参数，待删除元素位置的索引号。删除后，被删除元素后面元素自动前移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br><span class="line">L.pop(2)</span><br><span class="line">L.pop(2)</span><br><span class="line">print L       # ==&gt; [&apos;Adam&apos;, &apos;Lisa&apos;]</span><br></pre></td></tr></table></figure></p><p>*替换元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L[0],L[2] = L[2],L[0]  # ==&gt; 交换L[0],L[2]元素</span><br><span class="line">print L                # ==&gt; [&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure></p><h3 id="8、tuple（元组）"><a href="#8、tuple（元组）" class="headerlink" title="8、tuple（元组）"></a>8、tuple（元组）</h3><p>tuple是另一种有序的列表，中文翻译为“ 元组 ”。<br>tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。<br>*创建多元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (0,1,2,3,4,5,6,7,8,9)</span><br><span class="line">print t                # ==&gt; (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure></p><p>创建tuple和创建list唯一不同之处是用( )替代了[ ]；<br>获取 tuple 元素的方式和 list 是一模一样的，可以正常使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素。<br>*创建单元素tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1)</span><br><span class="line">print t  # ==&gt; 1</span><br></pre></td></tr></table></figure></p><p>因为( )既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。</p><p>正是因为用( )定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1,)</span><br><span class="line">print t  # ==&gt; (1,) Python在打印单元素tuple时，也自动添加了一个“,”，为了更明确地告诉你这是一个tuple。</span><br></pre></td></tr></table></figure></p><p>多元素 tuple 加不加这个额外的“,”效果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (1, 2, 3,)</span><br><span class="line">print t  # ==&gt; (1, 2, 3)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ()</span><br><span class="line">print t  # ==&gt; () 空tuple</span><br></pre></td></tr></table></figure><p>***“可变”的tuple：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class="line">L = t[2]</span><br><span class="line">L[0] = &apos;X&apos;</span><br><span class="line">L[1] = &apos;Y&apos;</span><br><span class="line">print t  # ==&gt; (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure></p><p>表面上，tuple是“可变”的了；<br>实际上，tuple内的元素并没有发生改变，而是tuple里list的元素改变。<br>tuple所谓的“不变”是说，tuple的每个元素，指向是永远不变！</p><h3 id="9、条件判断"><a href="#9、条件判断" class="headerlink" title="9、条件判断"></a>9、条件判断</h3><p>*if语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;your age is&apos;, age</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">print &apos;END&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>（1）Python代码的缩进规则<br>具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。<br>缩进请严格按照Python的习惯写法：<br>4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。<br>（2） if 语句后接表达式，然后用:表示代码块开始。<br>如果是在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车。</p></blockquote><p>*if-else：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;teenager&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>else 后面有个“:”。</p></blockquote><p>*if-elif-else：<br>要避免嵌套结构的 if … else …，我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">elif age &gt;= 6:    #elif 意思就是 else if</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 3:    </span><br><span class="line">    print &apos;kid&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;baby&apos;</span><br></pre></td></tr></table></figure></p><h3 id="10、循环"><a href="#10、循环" class="headerlink" title="10、循环"></a>10、循环</h3><p>*for循环：（迭代所有元素）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for ... in ...:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">for name in L:</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>*while循环：（根据表达式判断循环是否结束）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while ...循环判断表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 10</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; N:</span><br><span class="line">    print x</span><br><span class="line">    x = x + 1</span><br></pre></td></tr></table></figure><p>while循环每次先判断 x &lt; N（循环判断表达式），如果为True，则执行循环体的代码块，否则，退出循环。<br>*break:<br>用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 计算 1 + 2 + 4 + 8 + 16 + ... 的前20项的和</span><br><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">n = 1</span><br><span class="line">while True:</span><br><span class="line">    </span><br><span class="line">#   i = x</span><br><span class="line">#   while i &gt; 1:</span><br><span class="line">#       i /= 2.0</span><br><span class="line">#   if i == 1:</span><br><span class="line">#       sum += x</span><br><span class="line">#       n += 1</span><br><span class="line">#   if n &gt; 20:</span><br><span class="line">#       break</span><br><span class="line">#   x += 1</span><br><span class="line">    </span><br><span class="line">    sum += x</span><br><span class="line">    x *= 2</span><br><span class="line">    n += 1</span><br><span class="line">    if n &gt; 20:</span><br><span class="line">        break</span><br><span class="line">print sum    # ==&gt; 1048575</span><br></pre></td></tr></table></figure></p><p>*continue继续循环：<br>可以用continue跳过后续循环代码，继续下一次循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 计算0 - 100奇数的和</span><br><span class="line">sum = 0</span><br><span class="line">x = 0</span><br><span class="line">while True:</span><br><span class="line">    x = x + 1</span><br><span class="line">    if x &gt; 100:</span><br><span class="line">        break</span><br><span class="line">    if not x % 2:</span><br><span class="line">        continue</span><br><span class="line">    sum += x</span><br><span class="line">print sum   # ==&gt; 2500</span><br></pre></td></tr></table></figure></p><hr><h2 id="第二章-进阶"><a href="#第二章-进阶" class="headerlink" title="第二章 进阶"></a>第二章 进阶</h2><h3 id="1、dict"><a href="#1、dict" class="headerlink" title="1、dict"></a>1、dict</h3><p>list 和 tuple 可以用来表示顺序集合，<br>用 dict 表示“名字”-“成绩”的查找表<br>*创建dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把名字称为key，对应的成绩称为value，dict就是通过 key 来查找 value。<br>花括号 { } 表示这是一个dict，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略。</p><blockquote><p>*注：<br>dict也是集合，len( ) 函数可以计算任意集合（list，tuple，dict）的大小。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3]</span><br><span class="line">t = (1,2,3,4,5)</span><br><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;                           # 一个 key-value 算一个</span><br><span class="line">print len(l),len(t),len(d)  # ==&gt; 3 5 3</span><br></pre></td></tr></table></figure><p>*访问dict：<br>可以简单地使用 d[key] 的形式来查找对应的 value。<br>通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：KeyError。<br><code>print d[&#39;Adam&#39;] # ==&gt; 95</code><br>要避免 KeyError 发生，有两种办法：<br>一是先判断一下 key 是否存在，用 in 操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if &apos;Paul&apos; in d:</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br></pre></td></tr></table></figure></p><p>二是使用dict本身提供的一个 get 方法，在Key不存在的时候，返回None：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print d.get(&apos;Bart&apos;) # ==&gt; 59</span><br><span class="line">print d.get(&apos;Paul&apos;) # ==&gt; None</span><br></pre></td></tr></table></figure></p><p>*dict的特点：<br>一是查找速度快，无论其中有多少元素，查找速度都一样，但缺点是占用内存大，还会浪费很多内容，而list占用内存小，但其查找速度随着元素增加而逐渐下降。<br>由于dict是按 key 查找，所以，在一个dict中，key不能重复。<br>二是存储的key-value序对是没有顺序的，这与list不一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">print d  # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure></p><p>打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明dict内部是无序的，不能用dict存储有序的集合。<br>三是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。但是list是可变的，就不能作为 key。<br>*更新dict：<br>dict是可变的，也就是说，我们可以随时往dict中添加新的 key-value。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">d[&apos;Paul&apos;] = 72  # 添加新的k-v对</span><br><span class="line">d[&apos;Bart&apos;] = 60  # 如果 key 已经存在，则赋值会用新的 value 替换掉原来的 value</span><br><span class="line">print d         # ==&gt; &#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60&#125;</span><br></pre></td></tr></table></figure></p><p>*遍历dict：<br>由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过 for 循环实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">for key in d:</span><br><span class="line">    print key&apos;:&apos;d[key]</span><br><span class="line"></span><br><span class="line"># 结果：Lisa : 85</span><br><span class="line">#       Adam : 95</span><br><span class="line">#       Bart : 59</span><br></pre></td></tr></table></figure></p><h3 id="2、set"><a href="#2、set" class="headerlink" title="2、set"></a>2、set</h3><p>dict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。<br>set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。<br>*创建set：<br>调用 set() 并传入一个 list，list的元素将作为set的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line">print s     # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br></pre></td></tr></table></figure></p><p>打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。<br>因为set不能包含重复的元素，所以，当我们传入包含重复元素的 list 会怎么样呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])</span><br><span class="line">print s,len(s)   # ==&gt; set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;]) 3</span><br></pre></td></tr></table></figure></p><p>结果显示，set会自动去掉重复的元素。<br>*访问set：<br>由于set存储的是无序集合，所以我们没法通过索引来访问。<br>访问 set中的某个元素实际上就是判断一个元素是否在set中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])</span><br><span class="line">print &apos;Bart&apos; in s  # ==&gt; True</span><br><span class="line">print &apos;bart&apos; in s  # ==&gt; False</span><br></pre></td></tr></table></figure></p><p>对大小写敏感，’Bart’ 和 ‘bart’被认为是两个不同的元素。<br>*set的特色：<br>一是set的内部结构和dict很像，唯一区别是不存储value，因此，判断一个元素是否在set中速度很快。<br>二是set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。<br>三是set存储的元素也是没有顺序的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;])</span><br><span class="line">x = &apos;???&apos;  # 用户输入的字符串</span><br><span class="line">if x in weekdays:</span><br><span class="line">    print &apos;input ok&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;input error&apos;</span><br></pre></td></tr></table></figure></p><p>*遍历set：<br>由于 set 也是一个集合，所以，遍历 set 和遍历 list 类似，都可以通过 for 循环实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])</span><br><span class="line">for x in s:</span><br><span class="line">    print x[0],&apos;:&apos;,x[1]</span><br><span class="line"></span><br><span class="line"># 结果：Lisa : 85</span><br><span class="line">#       Adam : 95</span><br><span class="line">#       Bart : 59</span><br></pre></td></tr></table></figure></p><p>*更新set：<br>一是把新的元素添加到set中；<br>添加元素时，用set的add( )方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 2, 3])</span><br><span class="line">s.add(4)  # 添加新元素</span><br><span class="line">s.add(3)  # 如果添加的元素已经存在于set中，add()不会报错，但是不会加进去了</span><br><span class="line">print s   # ==&gt; set([1, 2, 3, 4])</span><br></pre></td></tr></table></figure></p><p>二是把已有元素从set中删除<br>删除set中的元素时，用set的remove( )方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = set([1, 2, 3, 4])</span><br><span class="line">s.remove(4)</span><br><span class="line"># s.remove(5) 如果删除的元素不存在set中，remove()会报错</span><br><span class="line">print s  # ==&gt; set([1, 2, 3])</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>用add( )可以直接添加，而remove( )前需要判断。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 针对下面的set，给定一个list，对list中的每一个元素，如果在set中，就将其删除，如果不在set中，就添加进去。</span><br><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for i in L:</span><br><span class="line">    if i in s:</span><br><span class="line">        s.remove(i)</span><br><span class="line">    else:</span><br><span class="line">        s.add(i)</span><br><span class="line">print s  # ==&gt; set([&apos;Bart&apos;])</span><br></pre></td></tr></table></figure><h3 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h3><p>*调用函数：<br>调用一个函数，需要知道函数名和其参数。<br>Python有许多<a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="noopener">内置函数</a>，可直接调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 计算 1*1 + 2*2 + 3*3 + ... + 100*100</span><br><span class="line">L = []</span><br><span class="line">i = 1</span><br><span class="line">while i &lt;= 100:</span><br><span class="line">    L.append(pow(i,2))</span><br><span class="line">    i += 1    # sum()函数接受一个list作为参数，并返回list所有元素之和</span><br><span class="line">print sum(L)  # ==&gt; 338350</span><br></pre></td></tr></table></figure></p><p>*自定义（编写）函数：<br>Python中，要定义一个函数需要使用def语句：<br>依次写出函数名、括号、括号内参数以及冒号“:”，然后，在缩进块中编写函数体，函数返回值用return语句返回。<br>如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。<br>return None可以简写为return。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 以自定义一个符号函数为例：</span><br><span class="line">def sgn(x):</span><br><span class="line">    if x &gt; 0:</span><br><span class="line">    return 1</span><br><span class="line">    elif x == 0:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">    return -1</span><br></pre></td></tr></table></figure></p><p>*返回多值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def quadratic_equation(a, b, c):</span><br><span class="line">    x = (-b + math.sqrt(b*b-4*a*c))/(2*a)</span><br><span class="line">    y = (-b - math.sqrt(pow(b,2)-4*a*c))/(2*a)</span><br><span class="line">    return x,y</span><br><span class="line">xn,yn = quadratic_equation(2, 3, 0)</span><br><span class="line">print xn,yn                         # ==&gt; 0.0 -1.5</span><br><span class="line">print quadratic_equation(2, 3, 0)   # ==&gt; (0.0, -1.5)</span><br><span class="line">print quadratic_equation(1, -6, 5)  # ==&gt; (5.0, 1.0)</span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/u011225629/article/details/78458724" target="_blank" rel="noopener">math包</a>提供了很多数学函数。<br>由上述代码，从第一个print可见，我们可以同时获得多个返回值；<br>但是，这其实是假象，由第二、三个print可见，这返回的仍然是单一值，返回值是一个tuple。<br>在Python语法上，返回一个tuple可以省略括号，多个变量可以同时接收一个tuple，按位置赋值给对应变量。<br>*递归函数：<br>在函数内部，可以调用其他函数。如果一个函数在内部调用函数自身，这个函数就是递归函数。<br>优点：定义简单，逻辑清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 阶乘</span><br><span class="line">def fact(n):</span><br><span class="line">    if n &lt; 0:</span><br><span class="line">        return &quot;ERROR,PLEASE INPUT AGAIN!&quot;</span><br><span class="line">    elif n == 0 or n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">    return n * fact(n - 1)</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>使用递归函数需要注意防止栈溢出!在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p></blockquote><p>*定义默认参数：<br>定义函数的时候，还可以有默认参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def greet(s = &apos;world&apos;):</span><br><span class="line">    print &apos;Hello, &apos;+s+&apos;.&apos;</span><br><span class="line"></span><br><span class="line">greet()        # ==&gt; Hello, world.</span><br><span class="line">greet(&apos;Bart&apos;)  # ==&gt; Hello, Bart.</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>默认参数只能定义在必需参数的后面。</p></blockquote><p>*定义可变参数：<br>如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fn(*args):</span><br><span class="line">    print args</span><br></pre></td></tr></table></figure></p><p>可变参数名字前面有个*号。Python解释器会把传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def average(*args):</span><br><span class="line">    sum = 0.0</span><br><span class="line">    if len(args) == 0:</span><br><span class="line">        return 0.0</span><br><span class="line">    for i in args:</span><br><span class="line">        sum += i</span><br><span class="line">    ave = sum/len(args)    </span><br><span class="line">    return ave</span><br><span class="line"></span><br><span class="line">print average()               # ==&gt; 0.0</span><br><span class="line">print average(1, 2)           # ==&gt; 1.5   </span><br><span class="line">print average(1, 2, 2, 3, 4)  # ==&gt; 2.4</span><br></pre></td></tr></table></figure></p><h3 id="4、切片"><a href="#4、切片" class="headerlink" title="4、切片"></a>4、切片</h3><p>对于取指定索引范围的操作，可以用循环实现,但是十分繁琐；<br>Python提供了切片（slice）操作符，大大简化操作。<br>list与tuple，切片操作完全相同，只是切片结果一个是list，一个是tuple。<br><code>L[a:b]</code><br>表示从索引a开始取，直到索引b为止，但不包括索引b。<br>若a等于0，可以省略；<br>若a，b都省略，表示从头到尾取。<br><code>L[a:b:c]</code><br>参数c表示每c个取一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = range(1, 101)</span><br><span class="line"></span><br><span class="line">print L[:10]     # ==&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 前10个数</span><br><span class="line">print L[2::3]    # ==&gt; [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99] 3的倍数</span><br><span class="line">print L[4:50:5]  # ==&gt; [5, 10, 15, 20, 25, 30, 35, 40, 45, 50] 不大于50的5的倍数</span><br></pre></td></tr></table></figure></p><p>*倒序切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = range(1, 101)</span><br><span class="line">print L[-10:]    # ==&gt; [91, 92, 93, 94, 95, 96, 97, 98, 99, 100] 最后10个数</span><br><span class="line">print L[54::5]   # ==&gt; [55, 60, 65, 70, 75, 80, 85, 90, 95, 100] 最后10个5的倍数</span><br><span class="line">print L[-46::5]  # 与上一行结果一样</span><br></pre></td></tr></table></figure></p><p>记住倒数第一个元素的索引是-1。<br>倒序切片包含起始索引，不包含结束索引，与正序切片一样。<br>*对字符串切片：<br>字符串 ‘xxx’和 Unicode字符串 u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 字符串有个方法 upper() 可以把字符变成大写字母，但它会把所有字母都变成大写。设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。</span><br><span class="line">def firstCharUpper(s,n=1):</span><br><span class="line">    return s[:n].upper() + s[n:]</span><br><span class="line">print firstCharUpper(&apos;hello&apos;)      # ==&gt; Hello</span><br><span class="line">print firstCharUpper(&apos;sunday&apos;)     # ==&gt; Sunday</span><br><span class="line">print firstCharUpper(&apos;september&apos;)  # ==&gt; September</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br><a href="https://www.imooc.com/qadetail/307834" target="_blank" rel="noopener">Python2与Python3的差别很大</a></p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Python2</th><th style="text-align:center">Python3</th></tr></thead><tbody><tr><td style="text-align:center">print</td><td style="text-align:center">是语句，不需括号</td><td style="text-align:center">是函数，需加括号</td></tr><tr><td style="text-align:center">取值范围</td><td style="text-align:center">xrange( , )</td><td style="text-align:center">range( , )</td></tr><tr><td style="text-align:center">字符串存储</td><td style="text-align:center">8-bit</td><td style="text-align:center">16-bit Unicode</td></tr><tr><td style="text-align:center">纠错机制</td><td style="text-align:center">try:…except Exception, e :…</td><td style="text-align:center">try:…except Exception as e :…</td></tr><tr><td style="text-align:center">打开文件</td><td style="text-align:center">file(…..)或者open(……)</td><td style="text-align:center">只能用open(…..)</td></tr><tr><td style="text-align:center">键盘输入</td><td style="text-align:center">raw_input( “提示信息” )</td><td style="text-align:center">input( “提示信息” )</td></tr><tr><td style="text-align:center">除法</td><td style="text-align:center">10/3=3</td><td style="text-align:center">10/3=3.3333333333333335，更精确，而10//3=3，//是取整运算符</td></tr><tr><td style="text-align:center">库的变化</td><td style="text-align:center">……</td><td style="text-align:center">……</td></tr></tbody></table><h3 id="5、迭代"><a href="#5、迭代" class="headerlink" title="5、迭代"></a>5、迭代</h3><p>在Python中，如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们成为迭代（Iteration）。<br>在Python中，迭代是通过 for … in 来完成的。迭代操作就是对于一个集合，无论该集合是有序还是无序，我们用 for 循环总是可以依次取出集合的每一个元素。</p><blockquote><p>*注：<br>集合是指包含一组元素的数据结构，我们已经介绍的包括：<br>（1）有序集合：list，tuple，str和unicode；<br>（2）无序集合：set<br>（3）无序集合并且具有 key-value 对：dict</p></blockquote><p>而迭代是一个动词，它指的是一种操作。在Python中，就是 for 循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,101):</span><br><span class="line">    if i % 7 == 0:</span><br><span class="line">        print i  # for循环迭代数列 1-100 并打印出7的倍数</span><br></pre></td></tr></table></figure></p><p>*索引迭代：<br>Python中，迭代永远是取出元素本身，而非元素的索引。<br>对于有序集合，元素确实是有索引的。想在 for 循环中拿到索引，使用 enumerate( ) 函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for index, name in enumerate(L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br><span class="line"></span><br><span class="line"># ==&gt; 0 - Adam</span><br><span class="line">#     1 - Lisa</span><br><span class="line">#     2 - Bart</span><br><span class="line">#     3 - Paul</span><br></pre></td></tr></table></figure></p><p>实际上，enumerate( ) 函数把：<br><code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]</code><br>变成了类似：<br><code>[(0, &#39;Adam&#39;), (1, &#39;Lisa&#39;), (2, &#39;Bart&#39;), (3, &#39;Paul&#39;)]</code><br>因此，此时迭代的每一个元素实际上是一个tuple。<br>可见，索引迭代也不是真的按索引访问，而是由 enumerate( ) 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 打印出名次 - 名字（名次从1开始）</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">for index, name in zip(range(1,len(L)+1),L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br><span class="line"></span><br><span class="line"># ==&gt; 1 - Adam</span><br><span class="line">#     2 - Lisa</span><br><span class="line">#     3 - Bart</span><br><span class="line">#     4 - Paul</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>zip()函数可以把两个 list 变成一个 list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line"># [(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)]</span><br></pre></td></tr></table></figure></p></blockquote><p><em>迭代dict的value：<br>用 for 循环直接迭代 dict，可以每次拿到dict的一个key。<br>如果我们希望迭代 dict 对象的value，dict 对象有一个 values( ) 方法，这个方法把dict转换成一个包含所有value的list。<br>dict除了values( )方法外，还有一个 itervalues( ) 方法，用 itervalues( ) 方法替代 values( ) 方法，迭代效果完全一样：</em>迭代dict的key和value：<br>在一个 for 循环中，同时迭代 key和value，可以使用dict对象的items( )方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.items()  # ==&gt; [(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)]</span><br></pre></td></tr></table></figure></p><p>items() 方法把dict对象转换成了包含tuple的list。我们对这个list进行迭代，即可同时获得key和value。</p><blockquote><p>*注：<br>在Python3中，dict.iterkeys()、dict.itervalues()和dict.iteritems()方法将会移除。<br>而且其中使用.keys()、.values()和.items()，它们会返回更轻量级的、类似于集合的容器对象，而不是返回一个列表（list）。</p></blockquote><h3 id="6、列表生成式"><a href="#6、列表生成式" class="headerlink" title="6、列表生成式"></a>6、列表生成式</h3><p>*生成列表：<br>如果要生成[1x1, 2x2, 3x3, …, 10x10]，<br>一是可以用循环实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">for x in range(1,11):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">print L  # ==&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"># 太繁琐！</span><br></pre></td></tr></table></figure></p><p>二就是使用列表生成式：<br><code>[x * x for x in range(1,11)]</code><br>写列表生成式时，把要生成的元素放到前面，后面跟 for 循环，就可以把list创建出来。<br>*复杂表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">def generate_tr(name, score):</span><br><span class="line">    return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; %(name, score)</span><br><span class="line"></span><br><span class="line">tds = [generate_tr(name, score) for name, score in d.items()]</span><br><span class="line">print &apos;&lt;table border=&quot;1&quot;&gt;&apos;</span><br><span class="line">print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;</span><br><span class="line">print &apos;\n&apos;.join(tds)</span><br><span class="line">print &apos;&lt;/table&gt;&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>字符串可以通过 % 进行格式化，用指定的参数替代 %s。字符串的join( )方法可以把一个 list 拼接成一个字符串。</p></blockquote><p>*条件过滤：<br>列表生成式的 for 循环后面还可以加上 if 判断。<br>例如：如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,11) if x % 2 == 0]</span><br><span class="line"># [4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure></p><p>有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def toUppers(L):</span><br><span class="line">    return [x.upper() for x in L if isinstance(x, str)]</span><br><span class="line"></span><br><span class="line">print toUppers([&apos;Hello&apos;, &apos;world&apos;, 101])  # ==&gt; [&apos;HELLO&apos;, &apos;WORLD&apos;]</span><br></pre></td></tr></table></figure></p><blockquote><p>*注：<br>isinstance(x, str) 可以判断变量 x 是否是字符串。</p></blockquote><p>*多层表达式：<br>for循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 找出对称的 3 位数</span><br><span class="line">print [a*100 + b*10 + c for a in range(1,10) for b in range(0,10) for c in range(1,10) if a == c]</span><br><span class="line"># ==&gt; [101, 111, 121, 131, 141, 151, 161, 171, ......, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-基本功&quot;&gt;&lt;a href=&quot;#第一章-基本功&quot; class=&quot;headerlink&quot; title=&quot;第一章 基本功&quot;&gt;&lt;/a&gt;第一章 基本功&lt;/h2&gt;&lt;h3 id=&quot;1、变量名命名规则&quot;&gt;&lt;a href=&quot;#1、变量名命名规则&quot; class=&quot;headerlink&quot; title=&quot;1、变量名命名规则&quot;&gt;&lt;/a&gt;1、变量名命名规则&lt;/h3&gt;&lt;p&gt;在Python程序中，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头&lt;/p&gt;
&lt;h3 id=&quot;2、print语句&quot;&gt;&lt;a href=&quot;#2、print语句&quot; class=&quot;headerlink&quot; title=&quot;2、print语句&quot;&gt;&lt;/a&gt;2、print语句&lt;/h3&gt;&lt;p&gt;print语句可以向屏幕上输出指定的文字，也可以跟上多个字符串，用逗号“,”隔开。&lt;br&gt;print会依次打印每个字符串，遇到逗号“,”会输出一个空格。&lt;br&gt;&lt;code&gt;print &amp;#39;100 + 200 =&amp;#39;, 100 + 200  # ==&amp;gt; 100 + 200 = 300&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Learning" scheme="http://yoursite.com/tags/Learning/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
